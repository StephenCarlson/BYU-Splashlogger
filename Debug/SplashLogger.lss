
SplashLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020a  00800100  00002334  000023c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000212  0080030a  0080030a  000025d2  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000025d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00003258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  0000340e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000400  00000000  00000000  0000364e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003396  00000000  00000000  00003a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001948  00000000  00000000  00006de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002946  00000000  00000000  0000872c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000370  00000000  00000000  0000b074  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007fb  00000000  00000000  0000b3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001371  00000000  00000000  0000bbdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000007bc  00000000  00000000  0000cf50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000098  00000000  00000000  0000d70c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e3       	ldi	r30, 0x34	; 52
      7c:	f3 e2       	ldi	r31, 0x23	; 35
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 30       	cpi	r26, 0x0A	; 10
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	15 e0       	ldi	r17, 0x05	; 5
      8c:	aa e0       	ldi	r26, 0x0A	; 10
      8e:	b3 e0       	ldi	r27, 0x03	; 3
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 31       	cpi	r26, 0x1C	; 28
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
      9e:	0c 94 98 11 	jmp	0x2330	; 0x2330 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
} sample = {0xAAAA,0xBBBB,0xCCCC};



// Interrupt Vectors
ISR(INT0_vect){
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	df 93       	push	r29
      b2:	cf 93       	push	r28
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
	//sleep_disable();
}
      b8:	cf 91       	pop	r28
      ba:	df 91       	pop	r29
      bc:	0f 90       	pop	r0
      be:	0f be       	out	0x3f, r0	; 63
      c0:	0f 90       	pop	r0
      c2:	1f 90       	pop	r1
      c4:	18 95       	reti

000000c6 <__vector_2>:

ISR(INT1_vect){
      c6:	1f 92       	push	r1
      c8:	0f 92       	push	r0
      ca:	0f b6       	in	r0, 0x3f	; 63
      cc:	0f 92       	push	r0
      ce:	11 24       	eor	r1, r1
      d0:	df 93       	push	r29
      d2:	cf 93       	push	r28
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
	//sleep_disable();
}
      d8:	cf 91       	pop	r28
      da:	df 91       	pop	r29
      dc:	0f 90       	pop	r0
      de:	0f be       	out	0x3f, r0	; 63
      e0:	0f 90       	pop	r0
      e2:	1f 90       	pop	r1
      e4:	18 95       	reti

000000e6 <main>:

// Main Program
int main(void){
      e6:	df 93       	push	r29
      e8:	cf 93       	push	r28
      ea:	00 d0       	rcall	.+0      	; 0xec <main+0x6>
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
	setup();
      f0:	0e 94 06 01 	call	0x20c	; 0x20c <setup>

	while(1){
		if((TCNT1-timeStamp) < LOOP_PERIOD);
      f4:	84 e8       	ldi	r24, 0x84	; 132
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	fc 01       	movw	r30, r24
      fa:	20 81       	ld	r18, Z
      fc:	31 81       	ldd	r19, Z+1	; 0x01
      fe:	80 91 0c 03 	lds	r24, 0x030C
     102:	90 91 0d 03 	lds	r25, 0x030D
     106:	a9 01       	movw	r20, r18
     108:	48 1b       	sub	r20, r24
     10a:	59 0b       	sbc	r21, r25
     10c:	ca 01       	movw	r24, r20
     10e:	59 e0       	ldi	r21, 0x09	; 9
     110:	84 3c       	cpi	r24, 0xC4	; 196
     112:	95 07       	cpc	r25, r21
     114:	08 f4       	brcc	.+2      	; 0x118 <main+0x32>
     116:	77 c0       	rjmp	.+238    	; 0x206 <main+0x120>
		else{
			if(timeCounter >= 100){
     118:	80 91 0e 03 	lds	r24, 0x030E
     11c:	84 36       	cpi	r24, 0x64	; 100
     11e:	08 f4       	brcc	.+2      	; 0x122 <main+0x3c>
     120:	53 c0       	rjmp	.+166    	; 0x1c8 <main+0xe2>
				timeCounter=0;
     122:	10 92 0e 03 	sts	0x030E, r1
				timeSeconds++;
     126:	80 91 0f 03 	lds	r24, 0x030F
     12a:	8f 5f       	subi	r24, 0xFF	; 255
     12c:	80 93 0f 03 	sts	0x030F, r24
				if((timeSeconds&0x0F) == 0){
     130:	80 91 0f 03 	lds	r24, 0x030F
     134:	88 2f       	mov	r24, r24
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	8f 70       	andi	r24, 0x0F	; 15
     13a:	90 70       	andi	r25, 0x00	; 0
     13c:	00 97       	sbiw	r24, 0x00	; 0
     13e:	09 f0       	breq	.+2      	; 0x142 <main+0x5c>
     140:	48 c0       	rjmp	.+144    	; 0x1d2 <main+0xec>
					uint16_t battVolt = getBatt();
     142:	0e 94 cb 04 	call	0x996	; 0x996 <getBatt>
     146:	9a 83       	std	Y+2, r25	; 0x02
     148:	89 83       	std	Y+1, r24	; 0x01
					printf("Batt: %u\n",battVolt);
     14a:	00 d0       	rcall	.+0      	; 0x14c <main+0x66>
     14c:	00 d0       	rcall	.+0      	; 0x14e <main+0x68>
     14e:	8d b7       	in	r24, 0x3d	; 61
     150:	9e b7       	in	r25, 0x3e	; 62
     152:	01 96       	adiw	r24, 0x01	; 1
     154:	24 e1       	ldi	r18, 0x14	; 20
     156:	31 e0       	ldi	r19, 0x01	; 1
     158:	fc 01       	movw	r30, r24
     15a:	31 83       	std	Z+1, r19	; 0x01
     15c:	20 83       	st	Z, r18
     15e:	29 81       	ldd	r18, Y+1	; 0x01
     160:	3a 81       	ldd	r19, Y+2	; 0x02
     162:	fc 01       	movw	r30, r24
     164:	33 83       	std	Z+3, r19	; 0x03
     166:	22 83       	std	Z+2, r18	; 0x02
     168:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     16c:	0f 90       	pop	r0
     16e:	0f 90       	pop	r0
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
					cli();
     174:	f8 94       	cli
					if(battVolt <= 2550){
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	9a 81       	ldd	r25, Y+2	; 0x02
     17a:	f9 e0       	ldi	r31, 0x09	; 9
     17c:	87 3f       	cpi	r24, 0xF7	; 247
     17e:	9f 07       	cpc	r25, r31
     180:	08 f5       	brcc	.+66     	; 0x1c4 <main+0xde>
						printf("Sleep Mode!\n");
     182:	8e e1       	ldi	r24, 0x1E	; 30
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <puts>
						set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     18a:	83 e5       	ldi	r24, 0x53	; 83
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	23 e5       	ldi	r18, 0x53	; 83
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	f9 01       	movw	r30, r18
     194:	20 81       	ld	r18, Z
     196:	21 7f       	andi	r18, 0xF1	; 241
     198:	24 60       	ori	r18, 0x04	; 4
     19a:	fc 01       	movw	r30, r24
     19c:	20 83       	st	Z, r18
						sleep_mode();
     19e:	83 e5       	ldi	r24, 0x53	; 83
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	23 e5       	ldi	r18, 0x53	; 83
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	f9 01       	movw	r30, r18
     1a8:	20 81       	ld	r18, Z
     1aa:	21 60       	ori	r18, 0x01	; 1
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
     1b0:	88 95       	sleep
     1b2:	83 e5       	ldi	r24, 0x53	; 83
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	23 e5       	ldi	r18, 0x53	; 83
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	f9 01       	movw	r30, r18
     1bc:	20 81       	ld	r18, Z
     1be:	2e 7f       	andi	r18, 0xFE	; 254
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18
						// sleep_bod_disable();
						// sei();
						// sleep_cpu();
						// sleep_disable();
					}
					sei();
     1c4:	78 94       	sei
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <main+0xec>
				}
			} else timeCounter++;
     1c8:	80 91 0e 03 	lds	r24, 0x030E
     1cc:	8f 5f       	subi	r24, 0xFF	; 255
     1ce:	80 93 0e 03 	sts	0x030E, r24
#if defined(DEBUG_MASTER)
			if(timeCounter%10 == 0) printDebug();
#endif
			timeStamp = TCNT1;
     1d2:	84 e8       	ldi	r24, 0x84	; 132
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	fc 01       	movw	r30, r24
     1d8:	80 81       	ld	r24, Z
     1da:	91 81       	ldd	r25, Z+1	; 0x01
     1dc:	90 93 0d 03 	sts	0x030D, r25
     1e0:	80 93 0c 03 	sts	0x030C, r24
			//loop();
#ifdef DEBUG_CPU_TIME
			timePeriod = TCNT1-timeStamp;
     1e4:	84 e8       	ldi	r24, 0x84	; 132
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	fc 01       	movw	r30, r24
     1ea:	20 81       	ld	r18, Z
     1ec:	31 81       	ldd	r19, Z+1	; 0x01
     1ee:	80 91 0c 03 	lds	r24, 0x030C
     1f2:	90 91 0d 03 	lds	r25, 0x030D
     1f6:	a9 01       	movw	r20, r18
     1f8:	48 1b       	sub	r20, r24
     1fa:	59 0b       	sbc	r21, r25
     1fc:	ca 01       	movw	r24, r20
     1fe:	90 93 15 05 	sts	0x0515, r25
     202:	80 93 14 05 	sts	0x0514, r24
#endif
		}
		loop();
     206:	0e 94 b3 01 	call	0x366	; 0x366 <loop>
	}
     20a:	74 cf       	rjmp	.-280    	; 0xf4 <main+0xe>

0000020c <setup>:
	return(0);
}

void setup(void){
     20c:	df 93       	push	r29
     20e:	cf 93       	push	r28
     210:	00 d0       	rcall	.+0      	; 0x212 <setup+0x6>
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
	// System
	MCUCR |= (1<<PUD);		// Pull-up Disable
     216:	85 e5       	ldi	r24, 0x55	; 85
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	25 e5       	ldi	r18, 0x55	; 85
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	f9 01       	movw	r30, r18
     220:	20 81       	ld	r18, Z
     222:	20 61       	ori	r18, 0x10	; 16
     224:	fc 01       	movw	r30, r24
     226:	20 83       	st	Z, r18

	// Timers
	TCCR1A = 0;
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	fc 01       	movw	r30, r24
     22e:	10 82       	st	Z, r1
	TCCR1B = (1<<CS10)|(1<<CS11);
     230:	81 e8       	ldi	r24, 0x81	; 129
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	23 e0       	ldi	r18, 0x03	; 3
     236:	fc 01       	movw	r30, r24
     238:	20 83       	st	Z, r18
	
	// IO Ports
	// 0: Input (Hi-Z) 1: Output
	//        76543210		7		6		5		4		3		2		1		0
	DDRB |= 0b00101111; //	XTAL2	XTAL1	SCK		MISO	MOSI	CS Fl	LED		CS Adxl
     23a:	84 e2       	ldi	r24, 0x24	; 36
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	24 e2       	ldi	r18, 0x24	; 36
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	f9 01       	movw	r30, r18
     244:	20 81       	ld	r18, Z
     246:	2f 62       	ori	r18, 0x2F	; 47
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
    DDRC |= 0b00000000; //	--		Reset	SCL		SDA
     24c:	87 e2       	ldi	r24, 0x27	; 39
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	27 e2       	ldi	r18, 0x27	; 39
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	20 81       	ld	r18, Z
     258:	fc 01       	movw	r30, r24
     25a:	20 83       	st	Z, r18
    DDRD |= 0b00000010; //									Int1	Int2	TXD		RXD
     25c:	8a e2       	ldi	r24, 0x2A	; 42
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	2a e2       	ldi	r18, 0x2A	; 42
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	f9 01       	movw	r30, r18
     266:	20 81       	ld	r18, Z
     268:	22 60       	ori	r18, 0x02	; 2
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
	PORTB |=0b00100111; // CS_FLASH = 1 and CS_ADXL = 1 possible alternate
     26e:	85 e2       	ldi	r24, 0x25	; 37
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	25 e2       	ldi	r18, 0x25	; 37
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	f9 01       	movw	r30, r18
     278:	20 81       	ld	r18, Z
     27a:	27 62       	ori	r18, 0x27	; 39
     27c:	fc 01       	movw	r30, r24
     27e:	20 83       	st	Z, r18
	
	// Serial Port
	UBRR0H = MYUBRR >> 8;
     280:	85 ec       	ldi	r24, 0xC5	; 197
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	fc 01       	movw	r30, r24
     286:	10 82       	st	Z, r1
    UBRR0L = MYUBRR;
     288:	84 ec       	ldi	r24, 0xC4	; 196
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	28 e0       	ldi	r18, 0x08	; 8
     28e:	fc 01       	movw	r30, r24
     290:	20 83       	st	Z, r18
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     292:	81 ec       	ldi	r24, 0xC1	; 193
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	28 e1       	ldi	r18, 0x18	; 24
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
    stdout = &mystdout;
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	90 93 19 05 	sts	0x0519, r25
     2a4:	80 93 18 05 	sts	0x0518, r24
	
	//SPI
	SPCR	= (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
     2a8:	8c e4       	ldi	r24, 0x4C	; 76
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	2c e5       	ldi	r18, 0x5C	; 92
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
	
	// ADC
	ADMUX 	= (1<<REFS0);	// AVcc Connected
     2b2:	8c e7       	ldi	r24, 0x7C	; 124
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	20 e4       	ldi	r18, 0x40	; 64
     2b8:	fc 01       	movw	r30, r24
     2ba:	20 83       	st	Z, r18
	ADCSRA 	= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
     2bc:	8a e7       	ldi	r24, 0x7A	; 122
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	26 e8       	ldi	r18, 0x86	; 134
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
	DIDR0 	= (1<<ADC5D)|(1<<ADC4D)|(1<<ADC3D)|(1<<ADC2D)|(1<<ADC1D)|(1<<ADC0D);
     2c6:	8e e7       	ldi	r24, 0x7E	; 126
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	2f e3       	ldi	r18, 0x3F	; 63
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
	
	ADXL345Init();
     2d0:	0e 94 39 05 	call	0xa72	; 0xa72 <ADXL345Init>
	ADXL345Mode(ACTIVE);
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	0e 94 1f 06 	call	0xc3e	; 0xc3e <ADXL345Mode>

	// Tasks and Routines
	printf("\n\nSplash Logger\n\n");
     2da:	8a e2       	ldi	r24, 0x2A	; 42
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <puts>
	
	flashLED(20,10,40);
     2e2:	84 e1       	ldi	r24, 0x14	; 20
     2e4:	6a e0       	ldi	r22, 0x0A	; 10
     2e6:	48 e2       	ldi	r20, 0x28	; 40
     2e8:	0e 94 39 07 	call	0xe72	; 0xe72 <flashLED>
	
	printf("Device ID Check: ");
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <setup+0xe2>
     2ee:	8d b7       	in	r24, 0x3d	; 61
     2f0:	9e b7       	in	r25, 0x3e	; 62
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	2b e3       	ldi	r18, 0x3B	; 59
     2f6:	31 e0       	ldi	r19, 0x01	; 1
     2f8:	fc 01       	movw	r30, r24
     2fa:	31 83       	std	Z+1, r19	; 0x01
     2fc:	20 83       	st	Z, r18
     2fe:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
	if(deviceIdCheck()){
     306:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <deviceIdCheck>
     30a:	88 23       	and	r24, r24
     30c:	11 f1       	breq	.+68     	; 0x352 <setup+0x146>
		printf("OK\n");
     30e:	8d e4       	ldi	r24, 0x4D	; 77
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <puts>
		for(uint16_t i = 0; i<(BUFFER_SIZE-1); i++){
     316:	1a 82       	std	Y+2, r1	; 0x02
     318:	19 82       	std	Y+1, r1	; 0x01
     31a:	0c c0       	rjmp	.+24     	; 0x334 <setup+0x128>
			dataBuffer[i] = '*'; //0x2A;
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	9a 81       	ldd	r25, Y+2	; 0x02
     320:	8c 5e       	subi	r24, 0xEC	; 236
     322:	9c 4f       	sbci	r25, 0xFC	; 252
     324:	2a e2       	ldi	r18, 0x2A	; 42
     326:	fc 01       	movw	r30, r24
     328:	20 83       	st	Z, r18
	flashLED(20,10,40);
	
	printf("Device ID Check: ");
	if(deviceIdCheck()){
		printf("OK\n");
		for(uint16_t i = 0; i<(BUFFER_SIZE-1); i++){
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	9a 83       	std	Y+2, r25	; 0x02
     332:	89 83       	std	Y+1, r24	; 0x01
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	9a 81       	ldd	r25, Y+2	; 0x02
     338:	f1 e0       	ldi	r31, 0x01	; 1
     33a:	8f 3f       	cpi	r24, 0xFF	; 255
     33c:	9f 07       	cpc	r25, r31
     33e:	70 f3       	brcs	.-36     	; 0x31c <setup+0x110>
			dataBuffer[i] = '*'; //0x2A;
		}
		dataBuffer[BUFFER_SIZE-1] = '\n'; //0x2A;
     340:	8a e0       	ldi	r24, 0x0A	; 10
     342:	80 93 13 05 	sts	0x0513, r24
		while(1) flashLED(10,30,30);
	}
	
		// Interrupts
	//EIMSK  = (1<<INT0)|(1<<INT1);	
	sei();
     346:	78 94       	sei
}
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	cf 91       	pop	r28
     34e:	df 91       	pop	r29
     350:	08 95       	ret
		for(uint16_t i = 0; i<(BUFFER_SIZE-1); i++){
			dataBuffer[i] = '*'; //0x2A;
		}
		dataBuffer[BUFFER_SIZE-1] = '\n'; //0x2A;
	} else{
		printf("FAILED!\n");
     352:	80 e5       	ldi	r24, 0x50	; 80
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <puts>
		//sysState = FAULT;
		while(1) flashLED(10,30,30);
     35a:	8a e0       	ldi	r24, 0x0A	; 10
     35c:	6e e1       	ldi	r22, 0x1E	; 30
     35e:	4e e1       	ldi	r20, 0x1E	; 30
     360:	0e 94 39 07 	call	0xe72	; 0xe72 <flashLED>
     364:	fa cf       	rjmp	.-12     	; 0x35a <setup+0x14e>

00000366 <loop>:
		// Interrupts
	//EIMSK  = (1<<INT0)|(1<<INT1);	
	sei();
}

void loop(void){
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	df 93       	push	r29
     36c:	cf 93       	push	r28
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	62 97       	sbiw	r28, 0x12	; 18
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
	static int count = 0;
	static char state = 0;
	//if(timeSeconds & 0x01) LED = HIGH;
	//else LED = LOW;
	
	printf("sizeof(sample)= %d\t", sizeof(sample));
     37e:	00 d0       	rcall	.+0      	; 0x380 <loop+0x1a>
     380:	00 d0       	rcall	.+0      	; 0x382 <loop+0x1c>
     382:	8d b7       	in	r24, 0x3d	; 61
     384:	9e b7       	in	r25, 0x3e	; 62
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	28 e5       	ldi	r18, 0x58	; 88
     38a:	31 e0       	ldi	r19, 0x01	; 1
     38c:	dc 01       	movw	r26, r24
     38e:	2d 93       	st	X+, r18
     390:	3c 93       	st	X, r19
     392:	26 e0       	ldi	r18, 0x06	; 6
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	fc 01       	movw	r30, r24
     398:	33 83       	std	Z+3, r19	; 0x03
     39a:	22 83       	std	Z+2, r18	; 0x02
     39c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
	printf("address: %p\t", &sample);
     3a8:	00 d0       	rcall	.+0      	; 0x3aa <loop+0x44>
     3aa:	00 d0       	rcall	.+0      	; 0x3ac <loop+0x46>
     3ac:	8d b7       	in	r24, 0x3d	; 61
     3ae:	9e b7       	in	r25, 0x3e	; 62
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	2c e6       	ldi	r18, 0x6C	; 108
     3b4:	31 e0       	ldi	r19, 0x01	; 1
     3b6:	dc 01       	movw	r26, r24
     3b8:	2d 93       	st	X+, r18
     3ba:	3c 93       	st	X, r19
     3bc:	2e e0       	ldi	r18, 0x0E	; 14
     3be:	31 e0       	ldi	r19, 0x01	; 1
     3c0:	fc 01       	movw	r30, r24
     3c2:	33 83       	std	Z+3, r19	; 0x03
     3c4:	22 83       	std	Z+2, r18	; 0x02
     3c6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
	printf("Values: %X, %X, %X\n", sample.X, sample.Y, sample.Z);
     3d2:	60 91 0e 01 	lds	r22, 0x010E
     3d6:	70 91 0f 01 	lds	r23, 0x010F
     3da:	40 91 10 01 	lds	r20, 0x0110
     3de:	50 91 11 01 	lds	r21, 0x0111
     3e2:	20 91 12 01 	lds	r18, 0x0112
     3e6:	30 91 13 01 	lds	r19, 0x0113
     3ea:	8d b7       	in	r24, 0x3d	; 61
     3ec:	9e b7       	in	r25, 0x3e	; 62
     3ee:	08 97       	sbiw	r24, 0x08	; 8
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	9e bf       	out	0x3e, r25	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	8d bf       	out	0x3d, r24	; 61
     3fa:	8d b7       	in	r24, 0x3d	; 61
     3fc:	9e b7       	in	r25, 0x3e	; 62
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	e9 e7       	ldi	r30, 0x79	; 121
     402:	f1 e0       	ldi	r31, 0x01	; 1
     404:	dc 01       	movw	r26, r24
     406:	ed 93       	st	X+, r30
     408:	fc 93       	st	X, r31
     40a:	fc 01       	movw	r30, r24
     40c:	73 83       	std	Z+3, r23	; 0x03
     40e:	62 83       	std	Z+2, r22	; 0x02
     410:	dc 01       	movw	r26, r24
     412:	15 96       	adiw	r26, 0x05	; 5
     414:	5c 93       	st	X, r21
     416:	4e 93       	st	-X, r20
     418:	14 97       	sbiw	r26, 0x04	; 4
     41a:	fc 01       	movw	r30, r24
     41c:	37 83       	std	Z+7, r19	; 0x07
     41e:	26 83       	std	Z+6, r18	; 0x06
     420:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     424:	8d b7       	in	r24, 0x3d	; 61
     426:	9e b7       	in	r25, 0x3e	; 62
     428:	08 96       	adiw	r24, 0x08	; 8
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	9e bf       	out	0x3e, r25	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	8d bf       	out	0x3d, r24	; 61
	printf("Elements: ");
     434:	00 d0       	rcall	.+0      	; 0x436 <loop+0xd0>
     436:	8d b7       	in	r24, 0x3d	; 61
     438:	9e b7       	in	r25, 0x3e	; 62
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	2d e8       	ldi	r18, 0x8D	; 141
     43e:	31 e0       	ldi	r19, 0x01	; 1
     440:	dc 01       	movw	r26, r24
     442:	2d 93       	st	X+, r18
     444:	3c 93       	st	X, r19
     446:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
	for(int i=0; i<6; i++){
     44e:	1a 82       	std	Y+2, r1	; 0x02
     450:	19 82       	std	Y+1, r1	; 0x01
     452:	37 c0       	rjmp	.+110    	; 0x4c2 <loop+0x15c>
		printf("%X, ", *(&sample + i));
     454:	29 81       	ldd	r18, Y+1	; 0x01
     456:	3a 81       	ldd	r19, Y+2	; 0x02
     458:	c9 01       	movw	r24, r18
     45a:	88 0f       	add	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	82 0f       	add	r24, r18
     460:	93 1f       	adc	r25, r19
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	9c 01       	movw	r18, r24
     468:	22 5f       	subi	r18, 0xF2	; 242
     46a:	3e 4f       	sbci	r19, 0xFE	; 254
     46c:	ed b7       	in	r30, 0x3d	; 61
     46e:	fe b7       	in	r31, 0x3e	; 62
     470:	38 97       	sbiw	r30, 0x08	; 8
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	fe bf       	out	0x3e, r31	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	ed bf       	out	0x3d, r30	; 61
     47c:	8d b7       	in	r24, 0x3d	; 61
     47e:	9e b7       	in	r25, 0x3e	; 62
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	48 e9       	ldi	r20, 0x98	; 152
     484:	51 e0       	ldi	r21, 0x01	; 1
     486:	dc 01       	movw	r26, r24
     488:	4d 93       	st	X+, r20
     48a:	5c 93       	st	X, r21
     48c:	02 96       	adiw	r24, 0x02	; 2
     48e:	46 e0       	ldi	r20, 0x06	; 6
     490:	f9 01       	movw	r30, r18
     492:	00 80       	ld	r0, Z
     494:	2f 5f       	subi	r18, 0xFF	; 255
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	dc 01       	movw	r26, r24
     49a:	0c 92       	st	X, r0
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	41 50       	subi	r20, 0x01	; 1
     4a0:	44 23       	and	r20, r20
     4a2:	b1 f7       	brne	.-20     	; 0x490 <loop+0x12a>
     4a4:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     4a8:	ed b7       	in	r30, 0x3d	; 61
     4aa:	fe b7       	in	r31, 0x3e	; 62
     4ac:	38 96       	adiw	r30, 0x08	; 8
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	fe bf       	out	0x3e, r31	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	ed bf       	out	0x3d, r30	; 61
	
	printf("sizeof(sample)= %d\t", sizeof(sample));
	printf("address: %p\t", &sample);
	printf("Values: %X, %X, %X\n", sample.X, sample.Y, sample.Z);
	printf("Elements: ");
	for(int i=0; i<6; i++){
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	9a 81       	ldd	r25, Y+2	; 0x02
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	89 83       	std	Y+1, r24	; 0x01
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	9a 81       	ldd	r25, Y+2	; 0x02
     4c6:	86 30       	cpi	r24, 0x06	; 6
     4c8:	91 05       	cpc	r25, r1
     4ca:	24 f2       	brlt	.-120    	; 0x454 <loop+0xee>
		printf("%X, ", *(&sample + i));
	}
	printf("\n");
     4cc:	8a e0       	ldi	r24, 0x0A	; 10
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <putchar>
	
	if(ADXLINT2){
     4d4:	89 e2       	ldi	r24, 0x29	; 41
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	dc 01       	movw	r26, r24
     4da:	8c 91       	ld	r24, X
     4dc:	88 2f       	mov	r24, r24
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	84 70       	andi	r24, 0x04	; 4
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	61 f0       	breq	.+24     	; 0x500 <loop+0x19a>
		if(state == 0){
     4e8:	80 91 11 03 	lds	r24, 0x0311
     4ec:	88 23       	and	r24, r24
     4ee:	51 f4       	brne	.+20     	; 0x504 <loop+0x19e>
			printf("[Watermark]\n");
     4f0:	8d e9       	ldi	r24, 0x9D	; 157
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <puts>
			state = 1;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	80 93 11 03 	sts	0x0311, r24
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <loop+0x19e>
		}
	} else state = 0;
     500:	10 92 11 03 	sts	0x0311, r1
	
	if(ADXLINT1){
     504:	89 e2       	ldi	r24, 0x29	; 41
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	fc 01       	movw	r30, r24
     50a:	80 81       	ld	r24, Z
     50c:	88 2f       	mov	r24, r24
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	88 70       	andi	r24, 0x08	; 8
     512:	90 70       	andi	r25, 0x00	; 0
     514:	00 97       	sbiw	r24, 0x00	; 0
     516:	09 f4       	brne	.+2      	; 0x51a <loop+0x1b4>
     518:	22 c1       	rjmp	.+580    	; 0x75e <loop+0x3f8>
		LED = HIGH;
     51a:	85 e2       	ldi	r24, 0x25	; 37
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	dc 01       	movw	r26, r24
     520:	2c 91       	ld	r18, X
     522:	22 60       	ori	r18, 0x02	; 2
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18
		
		CS_ADXL = LOW;
     528:	85 e2       	ldi	r24, 0x25	; 37
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	dc 01       	movw	r26, r24
     52e:	2c 91       	ld	r18, X
     530:	2e 7f       	andi	r18, 0xFE	; 254
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18
			transferSPI((READ<<7) | (SINGLE<<6) | 0x30);
     536:	80 eb       	ldi	r24, 0xB0	; 176
     538:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
			int status = transferSPI(0x00);
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
     542:	88 2f       	mov	r24, r24
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	9c 83       	std	Y+4, r25	; 0x04
     548:	8b 83       	std	Y+3, r24	; 0x03
		CS_ADXL = HIGH;
     54a:	85 e2       	ldi	r24, 0x25	; 37
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	dc 01       	movw	r26, r24
     550:	2c 91       	ld	r18, X
     552:	21 60       	ori	r18, 0x01	; 1
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
		
		printf("%u\t",++count);
     558:	80 91 12 03 	lds	r24, 0x0312
     55c:	90 91 13 03 	lds	r25, 0x0313
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	90 93 13 03 	sts	0x0313, r25
     566:	80 93 12 03 	sts	0x0312, r24
     56a:	20 91 12 03 	lds	r18, 0x0312
     56e:	30 91 13 03 	lds	r19, 0x0313
     572:	00 d0       	rcall	.+0      	; 0x574 <loop+0x20e>
     574:	00 d0       	rcall	.+0      	; 0x576 <loop+0x210>
     576:	8d b7       	in	r24, 0x3d	; 61
     578:	9e b7       	in	r25, 0x3e	; 62
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	49 ea       	ldi	r20, 0xA9	; 169
     57e:	51 e0       	ldi	r21, 0x01	; 1
     580:	dc 01       	movw	r26, r24
     582:	4d 93       	st	X+, r20
     584:	5c 93       	st	X, r21
     586:	fc 01       	movw	r30, r24
     588:	33 83       	std	Z+3, r19	; 0x03
     58a:	22 83       	std	Z+2, r18	; 0x02
     58c:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
		if(status&(1<<6)) printf("[1 Tap]");
     598:	8b 81       	ldd	r24, Y+3	; 0x03
     59a:	9c 81       	ldd	r25, Y+4	; 0x04
     59c:	80 74       	andi	r24, 0x40	; 64
     59e:	90 70       	andi	r25, 0x00	; 0
     5a0:	00 97       	sbiw	r24, 0x00	; 0
     5a2:	69 f0       	breq	.+26     	; 0x5be <loop+0x258>
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <loop+0x240>
     5a6:	8d b7       	in	r24, 0x3d	; 61
     5a8:	9e b7       	in	r25, 0x3e	; 62
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	2d ea       	ldi	r18, 0xAD	; 173
     5ae:	31 e0       	ldi	r19, 0x01	; 1
     5b0:	dc 01       	movw	r26, r24
     5b2:	2d 93       	st	X+, r18
     5b4:	3c 93       	st	X, r19
     5b6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
		if(status&(1<<5)) printf("[2 Tap]");
     5be:	8b 81       	ldd	r24, Y+3	; 0x03
     5c0:	9c 81       	ldd	r25, Y+4	; 0x04
     5c2:	80 72       	andi	r24, 0x20	; 32
     5c4:	90 70       	andi	r25, 0x00	; 0
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	69 f0       	breq	.+26     	; 0x5e4 <loop+0x27e>
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <loop+0x266>
     5cc:	8d b7       	in	r24, 0x3d	; 61
     5ce:	9e b7       	in	r25, 0x3e	; 62
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	25 eb       	ldi	r18, 0xB5	; 181
     5d4:	31 e0       	ldi	r19, 0x01	; 1
     5d6:	fc 01       	movw	r30, r24
     5d8:	31 83       	std	Z+1, r19	; 0x01
     5da:	20 83       	st	Z, r18
     5dc:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
		if(status&(1<<4)) printf("[Activity]");
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	9c 81       	ldd	r25, Y+4	; 0x04
     5e8:	80 71       	andi	r24, 0x10	; 16
     5ea:	90 70       	andi	r25, 0x00	; 0
     5ec:	00 97       	sbiw	r24, 0x00	; 0
     5ee:	69 f0       	breq	.+26     	; 0x60a <loop+0x2a4>
     5f0:	00 d0       	rcall	.+0      	; 0x5f2 <loop+0x28c>
     5f2:	8d b7       	in	r24, 0x3d	; 61
     5f4:	9e b7       	in	r25, 0x3e	; 62
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	2d eb       	ldi	r18, 0xBD	; 189
     5fa:	31 e0       	ldi	r19, 0x01	; 1
     5fc:	dc 01       	movw	r26, r24
     5fe:	2d 93       	st	X+, r18
     600:	3c 93       	st	X, r19
     602:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
		if(status&(1<<3)) printf("[InActive]");
     60a:	8b 81       	ldd	r24, Y+3	; 0x03
     60c:	9c 81       	ldd	r25, Y+4	; 0x04
     60e:	88 70       	andi	r24, 0x08	; 8
     610:	90 70       	andi	r25, 0x00	; 0
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	69 f0       	breq	.+26     	; 0x630 <loop+0x2ca>
     616:	00 d0       	rcall	.+0      	; 0x618 <loop+0x2b2>
     618:	8d b7       	in	r24, 0x3d	; 61
     61a:	9e b7       	in	r25, 0x3e	; 62
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	28 ec       	ldi	r18, 0xC8	; 200
     620:	31 e0       	ldi	r19, 0x01	; 1
     622:	fc 01       	movw	r30, r24
     624:	31 83       	std	Z+1, r19	; 0x01
     626:	20 83       	st	Z, r18
     628:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
		if(status&(1<<2)) printf("[Freefall]");
     630:	8b 81       	ldd	r24, Y+3	; 0x03
     632:	9c 81       	ldd	r25, Y+4	; 0x04
     634:	84 70       	andi	r24, 0x04	; 4
     636:	90 70       	andi	r25, 0x00	; 0
     638:	00 97       	sbiw	r24, 0x00	; 0
     63a:	69 f0       	breq	.+26     	; 0x656 <loop+0x2f0>
     63c:	00 d0       	rcall	.+0      	; 0x63e <loop+0x2d8>
     63e:	8d b7       	in	r24, 0x3d	; 61
     640:	9e b7       	in	r25, 0x3e	; 62
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	23 ed       	ldi	r18, 0xD3	; 211
     646:	31 e0       	ldi	r19, 0x01	; 1
     648:	dc 01       	movw	r26, r24
     64a:	2d 93       	st	X+, r18
     64c:	3c 93       	st	X, r19
     64e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
		printf("\r\n");
     656:	8e ed       	ldi	r24, 0xDE	; 222
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <puts>
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	a0 ea       	ldi	r26, 0xA0	; 160
     664:	b0 e4       	ldi	r27, 0x40	; 64
     666:	8d 83       	std	Y+5, r24	; 0x05
     668:	9e 83       	std	Y+6, r25	; 0x06
     66a:	af 83       	std	Y+7, r26	; 0x07
     66c:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     66e:	6d 81       	ldd	r22, Y+5	; 0x05
     670:	7e 81       	ldd	r23, Y+6	; 0x06
     672:	8f 81       	ldd	r24, Y+7	; 0x07
     674:	98 85       	ldd	r25, Y+8	; 0x08
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	4a e7       	ldi	r20, 0x7A	; 122
     67c:	55 e4       	ldi	r21, 0x45	; 69
     67e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	89 87       	std	Y+9, r24	; 0x09
     688:	9a 87       	std	Y+10, r25	; 0x0a
     68a:	ab 87       	std	Y+11, r26	; 0x0b
     68c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     68e:	11 e0       	ldi	r17, 0x01	; 1
     690:	69 85       	ldd	r22, Y+9	; 0x09
     692:	7a 85       	ldd	r23, Y+10	; 0x0a
     694:	8b 85       	ldd	r24, Y+11	; 0x0b
     696:	9c 85       	ldd	r25, Y+12	; 0x0c
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	40 e8       	ldi	r20, 0x80	; 128
     69e:	5f e3       	ldi	r21, 0x3F	; 63
     6a0:	0e 94 a5 0b 	call	0x174a	; 0x174a <__ltsf2>
     6a4:	88 23       	and	r24, r24
     6a6:	0c f0       	brlt	.+2      	; 0x6aa <loop+0x344>
     6a8:	10 e0       	ldi	r17, 0x00	; 0
     6aa:	11 23       	and	r17, r17
     6ac:	29 f0       	breq	.+10     	; 0x6b8 <loop+0x352>
		__ticks = 1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	9e 87       	std	Y+14, r25	; 0x0e
     6b4:	8d 87       	std	Y+13, r24	; 0x0d
     6b6:	46 c0       	rjmp	.+140    	; 0x744 <loop+0x3de>
	else if (__tmp > 65535)
     6b8:	11 e0       	ldi	r17, 0x01	; 1
     6ba:	69 85       	ldd	r22, Y+9	; 0x09
     6bc:	7a 85       	ldd	r23, Y+10	; 0x0a
     6be:	8b 85       	ldd	r24, Y+11	; 0x0b
     6c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	3f ef       	ldi	r19, 0xFF	; 255
     6c6:	4f e7       	ldi	r20, 0x7F	; 127
     6c8:	57 e4       	ldi	r21, 0x47	; 71
     6ca:	0e 94 45 0b 	call	0x168a	; 0x168a <__gtsf2>
     6ce:	18 16       	cp	r1, r24
     6d0:	0c f0       	brlt	.+2      	; 0x6d4 <loop+0x36e>
     6d2:	10 e0       	ldi	r17, 0x00	; 0
     6d4:	11 23       	and	r17, r17
     6d6:	61 f1       	breq	.+88     	; 0x730 <loop+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6d8:	6d 81       	ldd	r22, Y+5	; 0x05
     6da:	7e 81       	ldd	r23, Y+6	; 0x06
     6dc:	8f 81       	ldd	r24, Y+7	; 0x07
     6de:	98 85       	ldd	r25, Y+8	; 0x08
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e2       	ldi	r20, 0x20	; 32
     6e6:	51 e4       	ldi	r21, 0x41	; 65
     6e8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     6ec:	dc 01       	movw	r26, r24
     6ee:	cb 01       	movw	r24, r22
     6f0:	bc 01       	movw	r22, r24
     6f2:	cd 01       	movw	r24, r26
     6f4:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fixunssfsi>
     6f8:	dc 01       	movw	r26, r24
     6fa:	cb 01       	movw	r24, r22
     6fc:	9e 87       	std	Y+14, r25	; 0x0e
     6fe:	8d 87       	std	Y+13, r24	; 0x0d
     700:	12 c0       	rjmp	.+36     	; 0x726 <loop+0x3c0>
     702:	80 e9       	ldi	r24, 0x90	; 144
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	98 8b       	std	Y+16, r25	; 0x10
     708:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     70a:	8f 85       	ldd	r24, Y+15	; 0x0f
     70c:	98 89       	ldd	r25, Y+16	; 0x10
     70e:	8c 01       	movw	r16, r24
     710:	f8 01       	movw	r30, r16
     712:	31 97       	sbiw	r30, 0x01	; 1
     714:	f1 f7       	brne	.-4      	; 0x712 <loop+0x3ac>
     716:	8f 01       	movw	r16, r30
     718:	18 8b       	std	Y+16, r17	; 0x10
     71a:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     71c:	8d 85       	ldd	r24, Y+13	; 0x0d
     71e:	9e 85       	ldd	r25, Y+14	; 0x0e
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	9e 87       	std	Y+14, r25	; 0x0e
     724:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     726:	8d 85       	ldd	r24, Y+13	; 0x0d
     728:	9e 85       	ldd	r25, Y+14	; 0x0e
     72a:	00 97       	sbiw	r24, 0x00	; 0
     72c:	51 f7       	brne	.-44     	; 0x702 <loop+0x39c>
     72e:	17 c0       	rjmp	.+46     	; 0x75e <loop+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     730:	69 85       	ldd	r22, Y+9	; 0x09
     732:	7a 85       	ldd	r23, Y+10	; 0x0a
     734:	8b 85       	ldd	r24, Y+11	; 0x0b
     736:	9c 85       	ldd	r25, Y+12	; 0x0c
     738:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fixunssfsi>
     73c:	dc 01       	movw	r26, r24
     73e:	cb 01       	movw	r24, r22
     740:	9e 87       	std	Y+14, r25	; 0x0e
     742:	8d 87       	std	Y+13, r24	; 0x0d
     744:	8d 85       	ldd	r24, Y+13	; 0x0d
     746:	9e 85       	ldd	r25, Y+14	; 0x0e
     748:	9a 8b       	std	Y+18, r25	; 0x12
     74a:	89 8b       	std	Y+17, r24	; 0x11
     74c:	89 89       	ldd	r24, Y+17	; 0x11
     74e:	9a 89       	ldd	r25, Y+18	; 0x12
     750:	8c 01       	movw	r16, r24
     752:	c8 01       	movw	r24, r16
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <loop+0x3ee>
     758:	8c 01       	movw	r16, r24
     75a:	1a 8b       	std	Y+18, r17	; 0x12
     75c:	09 8b       	std	Y+17, r16	; 0x11
		
		_delay_ms(5);
	}
	LED = LOW;
     75e:	85 e2       	ldi	r24, 0x25	; 37
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	dc 01       	movw	r26, r24
     764:	2c 91       	ld	r18, X
     766:	2d 7f       	andi	r18, 0xFD	; 253
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
}
     76c:	62 96       	adiw	r28, 0x12	; 18
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	cf 91       	pop	r28
     77a:	df 91       	pop	r29
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	08 95       	ret

00000782 <printDebug>:

void printDebug(void){
     782:	df 93       	push	r29
     784:	cf 93       	push	r28
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
	//printf('\a'); //printf('\f'); //printf("%c", (char) 0x0C);
#if defined(DEBUG_CPU_TIME)
	printf("%u\t",timeSeconds);
     78a:	80 91 0f 03 	lds	r24, 0x030F
     78e:	28 2f       	mov	r18, r24
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	00 d0       	rcall	.+0      	; 0x794 <printDebug+0x12>
     794:	00 d0       	rcall	.+0      	; 0x796 <printDebug+0x14>
     796:	8d b7       	in	r24, 0x3d	; 61
     798:	9e b7       	in	r25, 0x3e	; 62
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	49 ea       	ldi	r20, 0xA9	; 169
     79e:	51 e0       	ldi	r21, 0x01	; 1
     7a0:	dc 01       	movw	r26, r24
     7a2:	4d 93       	st	X+, r20
     7a4:	5c 93       	st	X, r21
     7a6:	fc 01       	movw	r30, r24
     7a8:	33 83       	std	Z+3, r19	; 0x03
     7aa:	22 83       	std	Z+2, r18	; 0x02
     7ac:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
	//printf("%u uS\t",timePeriod);
#endif

#if defined(DEBUG_IMU)
	getAccelSample();
     7b8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <getAccelSample>
	printf("%i,\t%i,\t%i\t",sample.X,sample.Y,sample.Z);
     7bc:	60 91 0e 01 	lds	r22, 0x010E
     7c0:	70 91 0f 01 	lds	r23, 0x010F
     7c4:	40 91 10 01 	lds	r20, 0x0110
     7c8:	50 91 11 01 	lds	r21, 0x0111
     7cc:	20 91 12 01 	lds	r18, 0x0112
     7d0:	30 91 13 01 	lds	r19, 0x0113
     7d4:	8d b7       	in	r24, 0x3d	; 61
     7d6:	9e b7       	in	r25, 0x3e	; 62
     7d8:	08 97       	sbiw	r24, 0x08	; 8
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	9e bf       	out	0x3e, r25	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	8d bf       	out	0x3d, r24	; 61
     7e4:	8d b7       	in	r24, 0x3d	; 61
     7e6:	9e b7       	in	r25, 0x3e	; 62
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	e0 ee       	ldi	r30, 0xE0	; 224
     7ec:	f1 e0       	ldi	r31, 0x01	; 1
     7ee:	dc 01       	movw	r26, r24
     7f0:	ed 93       	st	X+, r30
     7f2:	fc 93       	st	X, r31
     7f4:	fc 01       	movw	r30, r24
     7f6:	73 83       	std	Z+3, r23	; 0x03
     7f8:	62 83       	std	Z+2, r22	; 0x02
     7fa:	dc 01       	movw	r26, r24
     7fc:	15 96       	adiw	r26, 0x05	; 5
     7fe:	5c 93       	st	X, r21
     800:	4e 93       	st	-X, r20
     802:	14 97       	sbiw	r26, 0x04	; 4
     804:	fc 01       	movw	r30, r24
     806:	37 83       	std	Z+7, r19	; 0x07
     808:	26 83       	std	Z+6, r18	; 0x06
     80a:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     80e:	8d b7       	in	r24, 0x3d	; 61
     810:	9e b7       	in	r25, 0x3e	; 62
     812:	08 96       	adiw	r24, 0x08	; 8
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	9e bf       	out	0x3e, r25	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	8d bf       	out	0x3d, r24	; 61
		printf("%u\t", adcValue);
	}
#endif

#if defined(DEBUG_VOLTS)
	printf("%u\t", getBatt());
     81e:	0e 94 cb 04 	call	0x996	; 0x996 <getBatt>
     822:	9c 01       	movw	r18, r24
     824:	00 d0       	rcall	.+0      	; 0x826 <printDebug+0xa4>
     826:	00 d0       	rcall	.+0      	; 0x828 <printDebug+0xa6>
     828:	8d b7       	in	r24, 0x3d	; 61
     82a:	9e b7       	in	r25, 0x3e	; 62
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	49 ea       	ldi	r20, 0xA9	; 169
     830:	51 e0       	ldi	r21, 0x01	; 1
     832:	dc 01       	movw	r26, r24
     834:	4d 93       	st	X+, r20
     836:	5c 93       	st	X, r21
     838:	fc 01       	movw	r30, r24
     83a:	33 83       	std	Z+3, r19	; 0x03
     83c:	22 83       	std	Z+2, r18	; 0x02
     83e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <printf>
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
#endif

	printf("\r\n");
     84a:	8e ed       	ldi	r24, 0xDE	; 222
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <puts>
}
     852:	cf 91       	pop	r28
     854:	df 91       	pop	r29
     856:	08 95       	ret

00000858 <getAccelFIFO>:

 void getAccelFIFO(void){
     858:	df 93       	push	r29
     85a:	cf 93       	push	r28
     85c:	00 d0       	rcall	.+0      	; 0x85e <getAccelFIFO+0x6>
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
	for(uint8_t j=0; j<32; j++){
     862:	19 82       	std	Y+1, r1	; 0x01
     864:	26 c0       	rjmp	.+76     	; 0x8b2 <getAccelFIFO+0x5a>
		getAccelSample();
     866:	0e 94 61 04 	call	0x8c2	; 0x8c2 <getAccelSample>
		for(uint8_t i=0; i<6; i++){ // sizeof(sample); ?
     86a:	1a 82       	std	Y+2, r1	; 0x02
     86c:	1a c0       	rjmp	.+52     	; 0x8a2 <getAccelFIFO+0x4a>
			if(bufferIndex > 500) break;
     86e:	80 91 0a 03 	lds	r24, 0x030A
     872:	90 91 0b 03 	lds	r25, 0x030B
     876:	21 e0       	ldi	r18, 0x01	; 1
     878:	85 3f       	cpi	r24, 0xF5	; 245
     87a:	92 07       	cpc	r25, r18
     87c:	b0 f4       	brcc	.+44     	; 0x8aa <getAccelFIFO+0x52>
			dataBuffer[bufferIndex++] = 'A'; //
     87e:	80 91 0a 03 	lds	r24, 0x030A
     882:	90 91 0b 03 	lds	r25, 0x030B
     886:	9c 01       	movw	r18, r24
     888:	2c 5e       	subi	r18, 0xEC	; 236
     88a:	3c 4f       	sbci	r19, 0xFC	; 252
     88c:	41 e4       	ldi	r20, 0x41	; 65
     88e:	f9 01       	movw	r30, r18
     890:	40 83       	st	Z, r20
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	90 93 0b 03 	sts	0x030B, r25
     898:	80 93 0a 03 	sts	0x030A, r24
}

 void getAccelFIFO(void){
	for(uint8_t j=0; j<32; j++){
		getAccelSample();
		for(uint8_t i=0; i<6; i++){ // sizeof(sample); ?
     89c:	8a 81       	ldd	r24, Y+2	; 0x02
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	8a 83       	std	Y+2, r24	; 0x02
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	86 30       	cpi	r24, 0x06	; 6
     8a6:	18 f3       	brcs	.-58     	; 0x86e <getAccelFIFO+0x16>
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <getAccelFIFO+0x54>
			if(bufferIndex > 500) break;
     8aa:	00 00       	nop

	printf("\r\n");
}

 void getAccelFIFO(void){
	for(uint8_t j=0; j<32; j++){
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	8f 5f       	subi	r24, 0xFF	; 255
     8b0:	89 83       	std	Y+1, r24	; 0x01
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	80 32       	cpi	r24, 0x20	; 32
     8b6:	b8 f2       	brcs	.-82     	; 0x866 <getAccelFIFO+0xe>
		for(uint8_t i=0; i<6; i++){ // sizeof(sample); ?
			if(bufferIndex > 500) break;
			dataBuffer[bufferIndex++] = 'A'; //
		}
	}
}
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	cf 91       	pop	r28
     8be:	df 91       	pop	r29
     8c0:	08 95       	ret

000008c2 <getAccelSample>:

void getAccelSample(void){
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	df 93       	push	r29
     8c8:	cf 93       	push	r28
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
	CS_ADXL = LOW;
     8ce:	85 e2       	ldi	r24, 0x25	; 37
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 81       	ld	r18, Z
     8d6:	2e 7f       	andi	r18, 0xFE	; 254
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
		transferSPI((READ<<7) | (MULTI<<6) | 0x32);
     8dc:	82 ef       	ldi	r24, 0xF2	; 242
     8de:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		sample.X = transferSPI(0x00);
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
     8e8:	88 2f       	mov	r24, r24
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	90 93 0f 01 	sts	0x010F, r25
     8f0:	80 93 0e 01 	sts	0x010E, r24
		sample.X += transferSPI(0x00)<<8;
     8f4:	00 91 0e 01 	lds	r16, 0x010E
     8f8:	10 91 0f 01 	lds	r17, 0x010F
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
     902:	88 2f       	mov	r24, r24
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	98 2f       	mov	r25, r24
     908:	88 27       	eor	r24, r24
     90a:	80 0f       	add	r24, r16
     90c:	91 1f       	adc	r25, r17
     90e:	90 93 0f 01 	sts	0x010F, r25
     912:	80 93 0e 01 	sts	0x010E, r24
		sample.Y = transferSPI(0x00);
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	90 93 11 01 	sts	0x0111, r25
     924:	80 93 10 01 	sts	0x0110, r24
		sample.Y += transferSPI(0x00)<<8;
     928:	00 91 10 01 	lds	r16, 0x0110
     92c:	10 91 11 01 	lds	r17, 0x0111
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
     936:	88 2f       	mov	r24, r24
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	98 2f       	mov	r25, r24
     93c:	88 27       	eor	r24, r24
     93e:	80 0f       	add	r24, r16
     940:	91 1f       	adc	r25, r17
     942:	90 93 11 01 	sts	0x0111, r25
     946:	80 93 10 01 	sts	0x0110, r24
		sample.Z = transferSPI(0x00);
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
     950:	88 2f       	mov	r24, r24
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	90 93 13 01 	sts	0x0113, r25
     958:	80 93 12 01 	sts	0x0112, r24
		sample.Z += transferSPI(0x00)<<8;
     95c:	00 91 12 01 	lds	r16, 0x0112
     960:	10 91 13 01 	lds	r17, 0x0113
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
     96a:	88 2f       	mov	r24, r24
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	98 2f       	mov	r25, r24
     970:	88 27       	eor	r24, r24
     972:	80 0f       	add	r24, r16
     974:	91 1f       	adc	r25, r17
     976:	90 93 13 01 	sts	0x0113, r25
     97a:	80 93 12 01 	sts	0x0112, r24
	CS_ADXL = HIGH;
     97e:	85 e2       	ldi	r24, 0x25	; 37
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	fc 01       	movw	r30, r24
     984:	20 81       	ld	r18, Z
     986:	21 60       	ori	r18, 0x01	; 1
     988:	fc 01       	movw	r30, r24
     98a:	20 83       	st	Z, r18
}
     98c:	cf 91       	pop	r28
     98e:	df 91       	pop	r29
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <getBatt>:

uint16_t getBatt(void){
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	00 d0       	rcall	.+0      	; 0x99c <getBatt+0x6>
     99c:	cd b7       	in	r28, 0x3d	; 61
     99e:	de b7       	in	r29, 0x3e	; 62
	uint16_t voltSample = readADC(14);
     9a0:	8e e0       	ldi	r24, 0x0E	; 14
     9a2:	0e 94 b0 06 	call	0xd60	; 0xd60 <readADC>
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
	//voltSample = 11000/voltSample;
	voltSample = 5353 - ((voltSample<<2)+(voltSample<<1)+(voltSample>>2));
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	9c 01       	movw	r18, r24
     9b0:	22 0f       	add	r18, r18
     9b2:	33 1f       	adc	r19, r19
     9b4:	22 0f       	add	r18, r18
     9b6:	33 1f       	adc	r19, r19
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	9a 81       	ldd	r25, Y+2	; 0x02
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	28 0f       	add	r18, r24
     9c2:	39 1f       	adc	r19, r25
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	9a 81       	ldd	r25, Y+2	; 0x02
     9c8:	96 95       	lsr	r25
     9ca:	87 95       	ror	r24
     9cc:	96 95       	lsr	r25
     9ce:	87 95       	ror	r24
     9d0:	82 0f       	add	r24, r18
     9d2:	93 1f       	adc	r25, r19
     9d4:	29 ee       	ldi	r18, 0xE9	; 233
     9d6:	34 e1       	ldi	r19, 0x14	; 20
     9d8:	a9 01       	movw	r20, r18
     9da:	48 1b       	sub	r20, r24
     9dc:	59 0b       	sbc	r21, r25
     9de:	ca 01       	movw	r24, r20
     9e0:	9a 83       	std	Y+2, r25	; 0x02
     9e2:	89 83       	std	Y+1, r24	; 0x01
	return voltSample;
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	cf 91       	pop	r28
     9ee:	df 91       	pop	r29
     9f0:	08 95       	ret

000009f2 <deviceIdCheck>:

char deviceIdCheck(void){
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <deviceIdCheck+0x6>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
	CS_ADXL = LOW;
     9fc:	85 e2       	ldi	r24, 0x25	; 37
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	fc 01       	movw	r30, r24
     a02:	20 81       	ld	r18, Z
     a04:	2e 7f       	andi	r18, 0xFE	; 254
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
		transferSPI((READ<<7) | (SINGLE<<6) | 0x00);
     a0a:	80 e8       	ldi	r24, 0x80	; 128
     a0c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		uint8_t accel = transferSPI(0x00);
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
     a16:	89 83       	std	Y+1, r24	; 0x01
	CS_ADXL = HIGH;
     a18:	85 e2       	ldi	r24, 0x25	; 37
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 81       	ld	r18, Z
     a20:	21 60       	ori	r18, 0x01	; 1
     a22:	fc 01       	movw	r30, r24
     a24:	20 83       	st	Z, r18
	
	CS_FLASH = LOW;
     a26:	85 e2       	ldi	r24, 0x25	; 37
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 81       	ld	r18, Z
     a2e:	2b 7f       	andi	r18, 0xFB	; 251
     a30:	fc 01       	movw	r30, r24
     a32:	20 83       	st	Z, r18
		transferSPI(0x9F);
     a34:	8f e9       	ldi	r24, 0x9F	; 159
     a36:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		transferSPI(0x00);
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		uint8_t flash = transferSPI(0x00);
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
     a46:	8a 83       	std	Y+2, r24	; 0x02
	CS_FLASH = HIGH;
     a48:	85 e2       	ldi	r24, 0x25	; 37
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 81       	ld	r18, Z
     a50:	24 60       	ori	r18, 0x04	; 4
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18
	
	if((accel ^ 0b11100101) == 0 && (flash ^ 0x26) == 0) return 1;
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	85 3e       	cpi	r24, 0xE5	; 229
     a5a:	29 f4       	brne	.+10     	; 0xa66 <deviceIdCheck+0x74>
     a5c:	8a 81       	ldd	r24, Y+2	; 0x02
     a5e:	86 32       	cpi	r24, 0x26	; 38
     a60:	11 f4       	brne	.+4      	; 0xa66 <deviceIdCheck+0x74>
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <deviceIdCheck+0x76>
	return 0;
     a66:	80 e0       	ldi	r24, 0x00	; 0
}
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	cf 91       	pop	r28
     a6e:	df 91       	pop	r29
     a70:	08 95       	ret

00000a72 <ADXL345Init>:

void ADXL345Init(void){
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	df 93       	push	r29
     a78:	cf 93       	push	r28
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	a5 97       	sbiw	r28, 0x25	; 37
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
	char configArray[] = {					// 21 Values
     a8a:	ce 01       	movw	r24, r28
     a8c:	41 96       	adiw	r24, 0x11	; 17
     a8e:	2c ee       	ldi	r18, 0xEC	; 236
     a90:	31 e0       	ldi	r19, 0x01	; 1
     a92:	45 e1       	ldi	r20, 0x15	; 21
     a94:	f9 01       	movw	r30, r18
     a96:	00 80       	ld	r0, Z
     a98:	2f 5f       	subi	r18, 0xFF	; 255
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	fc 01       	movw	r30, r24
     a9e:	00 82       	st	Z, r0
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	41 50       	subi	r20, 0x01	; 1
     aa4:	44 23       	and	r20, r20
     aa6:	b1 f7       	brne	.-20     	; 0xa94 <ADXL345Init+0x22>
		0b10000011,	// INT_MAP				[DataReady][1 Tap][2 Taps][Activity][Inactivity][FreeFall][Watermark][OverRun]
		0x00,		// INT_SOURCE READ-ONLY
		0b00001011	// DATA_FORMAT  FULL_RES bit set
	};
	
	CS_ADXL = LOW;
     aa8:	85 e2       	ldi	r24, 0x25	; 37
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	fc 01       	movw	r30, r24
     aae:	20 81       	ld	r18, Z
     ab0:	2e 7f       	andi	r18, 0xFE	; 254
     ab2:	fc 01       	movw	r30, r24
     ab4:	20 83       	st	Z, r18
		transferSPI((WRITE<<7) | (MULTI<<6) | 0x1D);
     ab6:	8d e5       	ldi	r24, 0x5D	; 93
     ab8:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		for(int i=0; i < 21; i++){
     abc:	1a 82       	std	Y+2, r1	; 0x02
     abe:	19 82       	std	Y+1, r1	; 0x01
     ac0:	10 c0       	rjmp	.+32     	; 0xae2 <ADXL345Init+0x70>
			transferSPI(configArray[i]);
     ac2:	9e 01       	movw	r18, r28
     ac4:	2f 5e       	subi	r18, 0xEF	; 239
     ac6:	3f 4f       	sbci	r19, 0xFF	; 255
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	9a 81       	ldd	r25, Y+2	; 0x02
     acc:	82 0f       	add	r24, r18
     ace:	93 1f       	adc	r25, r19
     ad0:	fc 01       	movw	r30, r24
     ad2:	80 81       	ld	r24, Z
     ad4:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		0b00001011	// DATA_FORMAT  FULL_RES bit set
	};
	
	CS_ADXL = LOW;
		transferSPI((WRITE<<7) | (MULTI<<6) | 0x1D);
		for(int i=0; i < 21; i++){
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	9a 81       	ldd	r25, Y+2	; 0x02
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	9a 83       	std	Y+2, r25	; 0x02
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	9a 81       	ldd	r25, Y+2	; 0x02
     ae6:	85 31       	cpi	r24, 0x15	; 21
     ae8:	91 05       	cpc	r25, r1
     aea:	5c f3       	brlt	.-42     	; 0xac2 <ADXL345Init+0x50>
			transferSPI(configArray[i]);
		}
	CS_ADXL = HIGH;
     aec:	85 e2       	ldi	r24, 0x25	; 37
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	fc 01       	movw	r30, r24
     af2:	20 81       	ld	r18, Z
     af4:	21 60       	ori	r18, 0x01	; 1
     af6:	fc 01       	movw	r30, r24
     af8:	20 83       	st	Z, r18
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a0 e8       	ldi	r26, 0x80	; 128
     b00:	bf e3       	ldi	r27, 0x3F	; 63
     b02:	8b 83       	std	Y+3, r24	; 0x03
     b04:	9c 83       	std	Y+4, r25	; 0x04
     b06:	ad 83       	std	Y+5, r26	; 0x05
     b08:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b0a:	6b 81       	ldd	r22, Y+3	; 0x03
     b0c:	7c 81       	ldd	r23, Y+4	; 0x04
     b0e:	8d 81       	ldd	r24, Y+5	; 0x05
     b10:	9e 81       	ldd	r25, Y+6	; 0x06
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	4a e7       	ldi	r20, 0x7A	; 122
     b18:	55 e4       	ldi	r21, 0x45	; 69
     b1a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	8f 83       	std	Y+7, r24	; 0x07
     b24:	98 87       	std	Y+8, r25	; 0x08
     b26:	a9 87       	std	Y+9, r26	; 0x09
     b28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b2a:	11 e0       	ldi	r17, 0x01	; 1
     b2c:	6f 81       	ldd	r22, Y+7	; 0x07
     b2e:	78 85       	ldd	r23, Y+8	; 0x08
     b30:	89 85       	ldd	r24, Y+9	; 0x09
     b32:	9a 85       	ldd	r25, Y+10	; 0x0a
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e8       	ldi	r20, 0x80	; 128
     b3a:	5f e3       	ldi	r21, 0x3F	; 63
     b3c:	0e 94 a5 0b 	call	0x174a	; 0x174a <__ltsf2>
     b40:	88 23       	and	r24, r24
     b42:	0c f0       	brlt	.+2      	; 0xb46 <ADXL345Init+0xd4>
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	11 23       	and	r17, r17
     b48:	29 f0       	breq	.+10     	; 0xb54 <ADXL345Init+0xe2>
		__ticks = 1;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	9c 87       	std	Y+12, r25	; 0x0c
     b50:	8b 87       	std	Y+11, r24	; 0x0b
     b52:	46 c0       	rjmp	.+140    	; 0xbe0 <ADXL345Init+0x16e>
	else if (__tmp > 65535)
     b54:	11 e0       	ldi	r17, 0x01	; 1
     b56:	6f 81       	ldd	r22, Y+7	; 0x07
     b58:	78 85       	ldd	r23, Y+8	; 0x08
     b5a:	89 85       	ldd	r24, Y+9	; 0x09
     b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	3f ef       	ldi	r19, 0xFF	; 255
     b62:	4f e7       	ldi	r20, 0x7F	; 127
     b64:	57 e4       	ldi	r21, 0x47	; 71
     b66:	0e 94 45 0b 	call	0x168a	; 0x168a <__gtsf2>
     b6a:	18 16       	cp	r1, r24
     b6c:	0c f0       	brlt	.+2      	; 0xb70 <ADXL345Init+0xfe>
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	11 23       	and	r17, r17
     b72:	61 f1       	breq	.+88     	; 0xbcc <ADXL345Init+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b74:	6b 81       	ldd	r22, Y+3	; 0x03
     b76:	7c 81       	ldd	r23, Y+4	; 0x04
     b78:	8d 81       	ldd	r24, Y+5	; 0x05
     b7a:	9e 81       	ldd	r25, Y+6	; 0x06
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e2       	ldi	r20, 0x20	; 32
     b82:	51 e4       	ldi	r21, 0x41	; 65
     b84:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	bc 01       	movw	r22, r24
     b8e:	cd 01       	movw	r24, r26
     b90:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fixunssfsi>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	9c 87       	std	Y+12, r25	; 0x0c
     b9a:	8b 87       	std	Y+11, r24	; 0x0b
     b9c:	12 c0       	rjmp	.+36     	; 0xbc2 <ADXL345Init+0x150>
     b9e:	80 e9       	ldi	r24, 0x90	; 144
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	9e 87       	std	Y+14, r25	; 0x0e
     ba4:	8d 87       	std	Y+13, r24	; 0x0d
     ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
     baa:	8c 01       	movw	r16, r24
     bac:	c8 01       	movw	r24, r16
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <ADXL345Init+0x13c>
     bb2:	8c 01       	movw	r16, r24
     bb4:	1e 87       	std	Y+14, r17	; 0x0e
     bb6:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bb8:	8b 85       	ldd	r24, Y+11	; 0x0b
     bba:	9c 85       	ldd	r25, Y+12	; 0x0c
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	9c 87       	std	Y+12, r25	; 0x0c
     bc0:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bc2:	8b 85       	ldd	r24, Y+11	; 0x0b
     bc4:	9c 85       	ldd	r25, Y+12	; 0x0c
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	51 f7       	brne	.-44     	; 0xb9e <ADXL345Init+0x12c>
     bca:	17 c0       	rjmp	.+46     	; 0xbfa <ADXL345Init+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bcc:	6f 81       	ldd	r22, Y+7	; 0x07
     bce:	78 85       	ldd	r23, Y+8	; 0x08
     bd0:	89 85       	ldd	r24, Y+9	; 0x09
     bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd4:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fixunssfsi>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	9c 87       	std	Y+12, r25	; 0x0c
     bde:	8b 87       	std	Y+11, r24	; 0x0b
     be0:	8b 85       	ldd	r24, Y+11	; 0x0b
     be2:	9c 85       	ldd	r25, Y+12	; 0x0c
     be4:	98 8b       	std	Y+16, r25	; 0x10
     be6:	8f 87       	std	Y+15, r24	; 0x0f
     be8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bea:	98 89       	ldd	r25, Y+16	; 0x10
     bec:	8c 01       	movw	r16, r24
     bee:	f8 01       	movw	r30, r16
     bf0:	31 97       	sbiw	r30, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <ADXL345Init+0x17e>
     bf4:	8f 01       	movw	r16, r30
     bf6:	18 8b       	std	Y+16, r17	; 0x10
     bf8:	0f 87       	std	Y+15, r16	; 0x0f
	
	_delay_ms(1);
	
	// FIFO
	CS_ADXL = LOW;
     bfa:	85 e2       	ldi	r24, 0x25	; 37
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	fc 01       	movw	r30, r24
     c00:	20 81       	ld	r18, Z
     c02:	2e 7f       	andi	r18, 0xFE	; 254
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
		transferSPI((WRITE<<7) | (SINGLE<<6) | 0x38); // FIFO_CTL
     c08:	88 e3       	ldi	r24, 0x38	; 56
     c0a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		transferSPI(0b11011111); // FIFO Mode 0b11011000 for Watermark = 24
     c0e:	8f ed       	ldi	r24, 0xDF	; 223
     c10:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
	CS_ADXL = HIGH;
     c14:	85 e2       	ldi	r24, 0x25	; 37
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	fc 01       	movw	r30, r24
     c1a:	20 81       	ld	r18, Z
     c1c:	21 60       	ori	r18, 0x01	; 1
     c1e:	fc 01       	movw	r30, r24
     c20:	20 83       	st	Z, r18
	
	adxlInitFlag = 1;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	80 93 10 03 	sts	0x0310, r24
}
     c28:	a5 96       	adiw	r28, 0x25	; 37
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	08 95       	ret

00000c3e <ADXL345Mode>:

void ADXL345Mode(int8_t mode){
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	0f 92       	push	r0
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	89 83       	std	Y+1, r24	; 0x01
	if(!adxlInitFlag) ADXL345Init();
     c4a:	80 91 10 03 	lds	r24, 0x0310
     c4e:	88 23       	and	r24, r24
     c50:	11 f4       	brne	.+4      	; 0xc56 <ADXL345Mode+0x18>
     c52:	0e 94 39 05 	call	0xa72	; 0xa72 <ADXL345Init>
	
	if(mode == SLEEP){
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	88 23       	and	r24, r24
     c5a:	b9 f4       	brne	.+46     	; 0xc8a <ADXL345Mode+0x4c>
		CS_ADXL = LOW;
     c5c:	85 e2       	ldi	r24, 0x25	; 37
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	fc 01       	movw	r30, r24
     c62:	20 81       	ld	r18, Z
     c64:	2e 7f       	andi	r18, 0xFE	; 254
     c66:	fc 01       	movw	r30, r24
     c68:	20 83       	st	Z, r18
			transferSPI((WRITE<<7) | (MULTI<<6) | 0x2D); // POWER_CTL
     c6a:	8d e6       	ldi	r24, 0x6D	; 109
     c6c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
			transferSPI(0b00001111); // SLEEP bit set, Rate 1 Hz, pg. 16
     c70:	8f e0       	ldi	r24, 0x0F	; 15
     c72:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
			transferSPI(0b00010000); // Activity bit set
     c76:	80 e1       	ldi	r24, 0x10	; 16
     c78:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		CS_ADXL = HIGH;
     c7c:	85 e2       	ldi	r24, 0x25	; 37
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	fc 01       	movw	r30, r24
     c82:	20 81       	ld	r18, Z
     c84:	21 60       	ori	r18, 0x01	; 1
     c86:	fc 01       	movw	r30, r24
     c88:	20 83       	st	Z, r18
	}
	if(mode == ACTIVE){
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	d1 f4       	brne	.+52     	; 0xcc4 <ADXL345Mode+0x86>
		CS_ADXL = LOW;
     c90:	85 e2       	ldi	r24, 0x25	; 37
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	fc 01       	movw	r30, r24
     c96:	20 81       	ld	r18, Z
     c98:	2e 7f       	andi	r18, 0xFE	; 254
     c9a:	fc 01       	movw	r30, r24
     c9c:	20 83       	st	Z, r18
			transferSPI((WRITE<<7) | (MULTI<<6) | 0x2C); // BW_RATE
     c9e:	8c e6       	ldi	r24, 0x6C	; 108
     ca0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
			transferSPI(0b00001111); // Rate code on Table 6 on pg. 6 0110 for slow
     ca4:	8f e0       	ldi	r24, 0x0F	; 15
     ca6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
			transferSPI(0b00101000); // MEASURE bit set, pg. 16
     caa:	88 e2       	ldi	r24, 0x28	; 40
     cac:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
			transferSPI(0b11111111); // [DataReady][1 Tap][2 Taps][Activity][Inactivity][FreeFall][Watermark][OverRun]
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		CS_ADXL = HIGH;
     cb6:	85 e2       	ldi	r24, 0x25	; 37
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	fc 01       	movw	r30, r24
     cbc:	20 81       	ld	r18, Z
     cbe:	21 60       	ori	r18, 0x01	; 1
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 83       	st	Z, r18
	}
	if(mode == ARMED){
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	b9 f4       	brne	.+46     	; 0xcf8 <ADXL345Mode+0xba>
		CS_ADXL = LOW;
     cca:	85 e2       	ldi	r24, 0x25	; 37
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	fc 01       	movw	r30, r24
     cd0:	20 81       	ld	r18, Z
     cd2:	2e 7f       	andi	r18, 0xFE	; 254
     cd4:	fc 01       	movw	r30, r24
     cd6:	20 83       	st	Z, r18
			transferSPI((WRITE<<7) | (MULTI<<6) | 0x2D); // POWER_CTL
     cd8:	8d e6       	ldi	r24, 0x6D	; 109
     cda:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
			transferSPI(0x04); // SLEEP bit set, Rate 8 Hz, pg. 16
     cde:	84 e0       	ldi	r24, 0x04	; 4
     ce0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
			transferSPI(0b00010000); // Activity bit set
     ce4:	80 e1       	ldi	r24, 0x10	; 16
     ce6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		CS_ADXL = HIGH;
     cea:	85 e2       	ldi	r24, 0x25	; 37
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	fc 01       	movw	r30, r24
     cf0:	20 81       	ld	r18, Z
     cf2:	21 60       	ori	r18, 0x01	; 1
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
	}	
}
     cf8:	0f 90       	pop	r0
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <dataFlashMode>:

void dataFlashMode(int8_t mode){
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	0f 92       	push	r0
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	89 83       	std	Y+1, r24	; 0x01
	if(mode == SLEEP){
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	88 23       	and	r24, r24
     d10:	91 f4       	brne	.+36     	; 0xd36 <dataFlashMode+0x36>
		CS_FLASH = LOW;
     d12:	85 e2       	ldi	r24, 0x25	; 37
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	fc 01       	movw	r30, r24
     d18:	20 81       	ld	r18, Z
     d1a:	2b 7f       	andi	r18, 0xFB	; 251
     d1c:	fc 01       	movw	r30, r24
     d1e:	20 83       	st	Z, r18
			transferSPI(0xB9);
     d20:	89 eb       	ldi	r24, 0xB9	; 185
     d22:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		CS_FLASH = HIGH;
     d26:	85 e2       	ldi	r24, 0x25	; 37
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 81       	ld	r18, Z
     d2e:	24 60       	ori	r18, 0x04	; 4
     d30:	fc 01       	movw	r30, r24
     d32:	20 83       	st	Z, r18
     d34:	11 c0       	rjmp	.+34     	; 0xd58 <dataFlashMode+0x58>
	} else{
		CS_FLASH = LOW;
     d36:	85 e2       	ldi	r24, 0x25	; 37
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	fc 01       	movw	r30, r24
     d3c:	20 81       	ld	r18, Z
     d3e:	2b 7f       	andi	r18, 0xFB	; 251
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
			transferSPI(0xAB);
     d44:	8b ea       	ldi	r24, 0xAB	; 171
     d46:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <transferSPI>
		CS_FLASH = HIGH;
     d4a:	85 e2       	ldi	r24, 0x25	; 37
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	fc 01       	movw	r30, r24
     d50:	20 81       	ld	r18, Z
     d52:	24 60       	ori	r18, 0x04	; 4
     d54:	fc 01       	movw	r30, r24
     d56:	20 83       	st	Z, r18
	}
}
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <readADC>:

uint16_t readADC(uint8_t adcChannel){
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	0f 92       	push	r0
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX 	= (1<<REFS0) | adcChannel;
     d6c:	8c e7       	ldi	r24, 0x7C	; 124
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	29 81       	ldd	r18, Y+1	; 0x01
     d72:	20 64       	ori	r18, 0x40	; 64
     d74:	fc 01       	movw	r30, r24
     d76:	20 83       	st	Z, r18
	ADCSRA 	|= (1<<ADSC);
     d78:	8a e7       	ldi	r24, 0x7A	; 122
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	2a e7       	ldi	r18, 0x7A	; 122
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	f9 01       	movw	r30, r18
     d82:	20 81       	ld	r18, Z
     d84:	20 64       	ori	r18, 0x40	; 64
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18
	while (ADCSRA & (1 << ADSC));
     d8a:	00 00       	nop
     d8c:	8a e7       	ldi	r24, 0x7A	; 122
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	fc 01       	movw	r30, r24
     d92:	80 81       	ld	r24, Z
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	80 74       	andi	r24, 0x40	; 64
     d9a:	90 70       	andi	r25, 0x00	; 0
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	b1 f7       	brne	.-20     	; 0xd8c <readADC+0x2c>
	return (ADCL + ((uint16_t) ADCH << 8));
     da0:	88 e7       	ldi	r24, 0x78	; 120
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	fc 01       	movw	r30, r24
     da6:	80 81       	ld	r24, Z
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	89 e7       	ldi	r24, 0x79	; 121
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	fc 01       	movw	r30, r24
     db2:	80 81       	ld	r24, Z
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	98 2f       	mov	r25, r24
     dba:	88 27       	eor	r24, r24
     dbc:	82 0f       	add	r24, r18
     dbe:	93 1f       	adc	r25, r19
}
     dc0:	0f 90       	pop	r0
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <transferSPI>:

uint8_t transferSPI(uint8_t data){
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
     dd4:	8e e4       	ldi	r24, 0x4E	; 78
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	29 81       	ldd	r18, Y+1	; 0x01
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18
	while (!(SPSR & _BV(SPIF)));
     dde:	00 00       	nop
     de0:	8d e4       	ldi	r24, 0x4D	; 77
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	fc 01       	movw	r30, r24
     de6:	80 81       	ld	r24, Z
     de8:	88 23       	and	r24, r24
     dea:	d4 f7       	brge	.-12     	; 0xde0 <transferSPI+0x18>
	return SPDR;
     dec:	8e e4       	ldi	r24, 0x4E	; 78
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	fc 01       	movw	r30, r24
     df2:	80 81       	ld	r24, Z
}
     df4:	0f 90       	pop	r0
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <putUARTchar>:

static int putUARTchar(char c, FILE *stream){
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	00 d0       	rcall	.+0      	; 0xe02 <putUARTchar+0x6>
     e02:	0f 92       	push	r0
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	7b 83       	std	Y+3, r23	; 0x03
     e0c:	6a 83       	std	Y+2, r22	; 0x02
    if (c == '\n') putUARTchar('\r', stream);
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	8a 30       	cpi	r24, 0x0A	; 10
     e12:	31 f4       	brne	.+12     	; 0xe20 <putUARTchar+0x24>
     e14:	2a 81       	ldd	r18, Y+2	; 0x02
     e16:	3b 81       	ldd	r19, Y+3	; 0x03
     e18:	8d e0       	ldi	r24, 0x0D	; 13
     e1a:	b9 01       	movw	r22, r18
     e1c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <putUARTchar>
    loop_until_bit_is_set(UCSR0A, UDRE0);
     e20:	80 ec       	ldi	r24, 0xC0	; 192
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	fc 01       	movw	r30, r24
     e26:	80 81       	ld	r24, Z
     e28:	88 2f       	mov	r24, r24
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	80 72       	andi	r24, 0x20	; 32
     e2e:	90 70       	andi	r25, 0x00	; 0
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	b1 f3       	breq	.-20     	; 0xe20 <putUARTchar+0x24>
    UDR0 = c;
     e34:	86 ec       	ldi	r24, 0xC6	; 198
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	29 81       	ldd	r18, Y+1	; 0x01
     e3a:	fc 01       	movw	r30, r24
     e3c:	20 83       	st	Z, r18
    return 0;
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <getUARTchar>:

uint8_t getUARTchar(void){
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
    while( !(UCSR0A & (1<<RXC0)) );
     e56:	00 00       	nop
     e58:	80 ec       	ldi	r24, 0xC0	; 192
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	fc 01       	movw	r30, r24
     e5e:	80 81       	ld	r24, Z
     e60:	88 23       	and	r24, r24
     e62:	d4 f7       	brge	.-12     	; 0xe58 <getUARTchar+0xa>
    return(UDR0);
     e64:	86 ec       	ldi	r24, 0xC6	; 198
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	fc 01       	movw	r30, r24
     e6a:	80 81       	ld	r24, Z
}
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <flashLED>:

void flashLED(uint8_t count, uint8_t high, uint8_t low){
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	6f 97       	sbiw	r28, 0x1f	; 31
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	8d 8f       	std	Y+29, r24	; 0x1d
     e8c:	6e 8f       	std	Y+30, r22	; 0x1e
     e8e:	4f 8f       	std	Y+31, r20	; 0x1f
	for(;count>0; count--){
     e90:	1f c1       	rjmp	.+574    	; 0x10d0 <flashLED+0x25e>
		LED = HIGH;
     e92:	85 e2       	ldi	r24, 0x25	; 37
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	fc 01       	movw	r30, r24
     e98:	20 81       	ld	r18, Z
     e9a:	22 60       	ori	r18, 0x02	; 2
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 83       	st	Z, r18
		_delay_ms(high);
     ea0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a0 e0       	ldi	r26, 0x00	; 0
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	0e 94 27 0c 	call	0x184e	; 0x184e <__floatunsisf>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	ab 83       	std	Y+3, r26	; 0x03
     ebc:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     ebe:	69 81       	ldd	r22, Y+1	; 0x01
     ec0:	7a 81       	ldd	r23, Y+2	; 0x02
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	9c 81       	ldd	r25, Y+4	; 0x04
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	4a e7       	ldi	r20, 0x7A	; 122
     ecc:	55 e4       	ldi	r21, 0x45	; 69
     ece:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	8d 83       	std	Y+5, r24	; 0x05
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	af 83       	std	Y+7, r26	; 0x07
     edc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     ede:	11 e0       	ldi	r17, 0x01	; 1
     ee0:	6d 81       	ldd	r22, Y+5	; 0x05
     ee2:	7e 81       	ldd	r23, Y+6	; 0x06
     ee4:	8f 81       	ldd	r24, Y+7	; 0x07
     ee6:	98 85       	ldd	r25, Y+8	; 0x08
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e8       	ldi	r20, 0x80	; 128
     eee:	5f e3       	ldi	r21, 0x3F	; 63
     ef0:	0e 94 a5 0b 	call	0x174a	; 0x174a <__ltsf2>
     ef4:	88 23       	and	r24, r24
     ef6:	0c f0       	brlt	.+2      	; 0xefa <flashLED+0x88>
     ef8:	10 e0       	ldi	r17, 0x00	; 0
     efa:	11 23       	and	r17, r17
     efc:	29 f0       	breq	.+10     	; 0xf08 <flashLED+0x96>
		__ticks = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9a 87       	std	Y+10, r25	; 0x0a
     f04:	89 87       	std	Y+9, r24	; 0x09
     f06:	46 c0       	rjmp	.+140    	; 0xf94 <flashLED+0x122>
	else if (__tmp > 65535)
     f08:	11 e0       	ldi	r17, 0x01	; 1
     f0a:	6d 81       	ldd	r22, Y+5	; 0x05
     f0c:	7e 81       	ldd	r23, Y+6	; 0x06
     f0e:	8f 81       	ldd	r24, Y+7	; 0x07
     f10:	98 85       	ldd	r25, Y+8	; 0x08
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	3f ef       	ldi	r19, 0xFF	; 255
     f16:	4f e7       	ldi	r20, 0x7F	; 127
     f18:	57 e4       	ldi	r21, 0x47	; 71
     f1a:	0e 94 45 0b 	call	0x168a	; 0x168a <__gtsf2>
     f1e:	18 16       	cp	r1, r24
     f20:	0c f0       	brlt	.+2      	; 0xf24 <flashLED+0xb2>
     f22:	10 e0       	ldi	r17, 0x00	; 0
     f24:	11 23       	and	r17, r17
     f26:	61 f1       	breq	.+88     	; 0xf80 <flashLED+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f28:	69 81       	ldd	r22, Y+1	; 0x01
     f2a:	7a 81       	ldd	r23, Y+2	; 0x02
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e2       	ldi	r20, 0x20	; 32
     f36:	51 e4       	ldi	r21, 0x41	; 65
     f38:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	bc 01       	movw	r22, r24
     f42:	cd 01       	movw	r24, r26
     f44:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9a 87       	std	Y+10, r25	; 0x0a
     f4e:	89 87       	std	Y+9, r24	; 0x09
     f50:	12 c0       	rjmp	.+36     	; 0xf76 <flashLED+0x104>
     f52:	80 e9       	ldi	r24, 0x90	; 144
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	9c 87       	std	Y+12, r25	; 0x0c
     f58:	8b 87       	std	Y+11, r24	; 0x0b
     f5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f5e:	8c 01       	movw	r16, r24
     f60:	c8 01       	movw	r24, r16
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <flashLED+0xf0>
     f66:	8c 01       	movw	r16, r24
     f68:	1c 87       	std	Y+12, r17	; 0x0c
     f6a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	9a 87       	std	Y+10, r25	; 0x0a
     f74:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	51 f7       	brne	.-44     	; 0xf52 <flashLED+0xe0>
     f7e:	17 c0       	rjmp	.+46     	; 0xfae <flashLED+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f80:	6d 81       	ldd	r22, Y+5	; 0x05
     f82:	7e 81       	ldd	r23, Y+6	; 0x06
     f84:	8f 81       	ldd	r24, Y+7	; 0x07
     f86:	98 85       	ldd	r25, Y+8	; 0x08
     f88:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fixunssfsi>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	9a 87       	std	Y+10, r25	; 0x0a
     f92:	89 87       	std	Y+9, r24	; 0x09
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	9e 87       	std	Y+14, r25	; 0x0e
     f9a:	8d 87       	std	Y+13, r24	; 0x0d
     f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa0:	8c 01       	movw	r16, r24
     fa2:	f8 01       	movw	r30, r16
     fa4:	31 97       	sbiw	r30, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <flashLED+0x132>
     fa8:	8f 01       	movw	r16, r30
     faa:	1e 87       	std	Y+14, r17	; 0x0e
     fac:	0d 87       	std	Y+13, r16	; 0x0d
		LED = LOW;
     fae:	85 e2       	ldi	r24, 0x25	; 37
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	fc 01       	movw	r30, r24
     fb4:	20 81       	ld	r18, Z
     fb6:	2d 7f       	andi	r18, 0xFD	; 253
     fb8:	fc 01       	movw	r30, r24
     fba:	20 83       	st	Z, r18
		_delay_ms(low);
     fbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a0 e0       	ldi	r26, 0x00	; 0
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	0e 94 27 0c 	call	0x184e	; 0x184e <__floatunsisf>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	8f 87       	std	Y+15, r24	; 0x0f
     fd4:	98 8b       	std	Y+16, r25	; 0x10
     fd6:	a9 8b       	std	Y+17, r26	; 0x11
     fd8:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     fda:	6f 85       	ldd	r22, Y+15	; 0x0f
     fdc:	78 89       	ldd	r23, Y+16	; 0x10
     fde:	89 89       	ldd	r24, Y+17	; 0x11
     fe0:	9a 89       	ldd	r25, Y+18	; 0x12
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a e7       	ldi	r20, 0x7A	; 122
     fe8:	55 e4       	ldi	r21, 0x45	; 69
     fea:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	8b 8b       	std	Y+19, r24	; 0x13
     ff4:	9c 8b       	std	Y+20, r25	; 0x14
     ff6:	ad 8b       	std	Y+21, r26	; 0x15
     ff8:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     ffa:	11 e0       	ldi	r17, 0x01	; 1
     ffc:	6b 89       	ldd	r22, Y+19	; 0x13
     ffe:	7c 89       	ldd	r23, Y+20	; 0x14
    1000:	8d 89       	ldd	r24, Y+21	; 0x15
    1002:	9e 89       	ldd	r25, Y+22	; 0x16
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	0e 94 a5 0b 	call	0x174a	; 0x174a <__ltsf2>
    1010:	88 23       	and	r24, r24
    1012:	0c f0       	brlt	.+2      	; 0x1016 <flashLED+0x1a4>
    1014:	10 e0       	ldi	r17, 0x00	; 0
    1016:	11 23       	and	r17, r17
    1018:	29 f0       	breq	.+10     	; 0x1024 <flashLED+0x1b2>
		__ticks = 1;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	98 8f       	std	Y+24, r25	; 0x18
    1020:	8f 8b       	std	Y+23, r24	; 0x17
    1022:	46 c0       	rjmp	.+140    	; 0x10b0 <flashLED+0x23e>
	else if (__tmp > 65535)
    1024:	11 e0       	ldi	r17, 0x01	; 1
    1026:	6b 89       	ldd	r22, Y+19	; 0x13
    1028:	7c 89       	ldd	r23, Y+20	; 0x14
    102a:	8d 89       	ldd	r24, Y+21	; 0x15
    102c:	9e 89       	ldd	r25, Y+22	; 0x16
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 45 0b 	call	0x168a	; 0x168a <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	0c f0       	brlt	.+2      	; 0x1040 <flashLED+0x1ce>
    103e:	10 e0       	ldi	r17, 0x00	; 0
    1040:	11 23       	and	r17, r17
    1042:	61 f1       	breq	.+88     	; 0x109c <flashLED+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	6f 85       	ldd	r22, Y+15	; 0x0f
    1046:	78 89       	ldd	r23, Y+16	; 0x10
    1048:	89 89       	ldd	r24, Y+17	; 0x11
    104a:	9a 89       	ldd	r25, Y+18	; 0x12
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	98 8f       	std	Y+24, r25	; 0x18
    106a:	8f 8b       	std	Y+23, r24	; 0x17
    106c:	12 c0       	rjmp	.+36     	; 0x1092 <flashLED+0x220>
    106e:	80 e9       	ldi	r24, 0x90	; 144
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	9a 8f       	std	Y+26, r25	; 0x1a
    1074:	89 8f       	std	Y+25, r24	; 0x19
    1076:	89 8d       	ldd	r24, Y+25	; 0x19
    1078:	9a 8d       	ldd	r25, Y+26	; 0x1a
    107a:	8c 01       	movw	r16, r24
    107c:	c8 01       	movw	r24, r16
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <flashLED+0x20c>
    1082:	8c 01       	movw	r16, r24
    1084:	1a 8f       	std	Y+26, r17	; 0x1a
    1086:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1088:	8f 89       	ldd	r24, Y+23	; 0x17
    108a:	98 8d       	ldd	r25, Y+24	; 0x18
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	98 8f       	std	Y+24, r25	; 0x18
    1090:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1092:	8f 89       	ldd	r24, Y+23	; 0x17
    1094:	98 8d       	ldd	r25, Y+24	; 0x18
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	51 f7       	brne	.-44     	; 0x106e <flashLED+0x1fc>
    109a:	17 c0       	rjmp	.+46     	; 0x10ca <flashLED+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109c:	6b 89       	ldd	r22, Y+19	; 0x13
    109e:	7c 89       	ldd	r23, Y+20	; 0x14
    10a0:	8d 89       	ldd	r24, Y+21	; 0x15
    10a2:	9e 89       	ldd	r25, Y+22	; 0x16
    10a4:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	98 8f       	std	Y+24, r25	; 0x18
    10ae:	8f 8b       	std	Y+23, r24	; 0x17
    10b0:	8f 89       	ldd	r24, Y+23	; 0x17
    10b2:	98 8d       	ldd	r25, Y+24	; 0x18
    10b4:	9c 8f       	std	Y+28, r25	; 0x1c
    10b6:	8b 8f       	std	Y+27, r24	; 0x1b
    10b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10bc:	8c 01       	movw	r16, r24
    10be:	f8 01       	movw	r30, r16
    10c0:	31 97       	sbiw	r30, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <flashLED+0x24e>
    10c4:	8f 01       	movw	r16, r30
    10c6:	1c 8f       	std	Y+28, r17	; 0x1c
    10c8:	0b 8f       	std	Y+27, r16	; 0x1b
    while( !(UCSR0A & (1<<RXC0)) );
    return(UDR0);
}

void flashLED(uint8_t count, uint8_t high, uint8_t low){
	for(;count>0; count--){
    10ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10cc:	81 50       	subi	r24, 0x01	; 1
    10ce:	8d 8f       	std	Y+29, r24	; 0x1d
    10d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d2:	88 23       	and	r24, r24
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <flashLED+0x266>
    10d6:	dd ce       	rjmp	.-582    	; 0xe92 <flashLED+0x20>
		LED = HIGH;
		_delay_ms(high);
		LED = LOW;
		_delay_ms(low);
	}
}
    10d8:	6f 96       	adiw	r28, 0x1f	; 31
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <__fixunssfsi>:
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	7b 01       	movw	r14, r22
    10f8:	8c 01       	movw	r16, r24
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	5f e4       	ldi	r21, 0x4F	; 79
    1102:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__gesf2>
    1106:	87 fd       	sbrc	r24, 7
    1108:	11 c0       	rjmp	.+34     	; 0x112c <__fixunssfsi+0x3e>
    110a:	c8 01       	movw	r24, r16
    110c:	b7 01       	movw	r22, r14
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	5f e4       	ldi	r21, 0x4F	; 79
    1116:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__subsf3>
    111a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__fixsfsi>
    111e:	9b 01       	movw	r18, r22
    1120:	ac 01       	movw	r20, r24
    1122:	20 50       	subi	r18, 0x00	; 0
    1124:	30 40       	sbci	r19, 0x00	; 0
    1126:	40 40       	sbci	r20, 0x00	; 0
    1128:	50 48       	sbci	r21, 0x80	; 128
    112a:	06 c0       	rjmp	.+12     	; 0x1138 <__fixunssfsi+0x4a>
    112c:	c8 01       	movw	r24, r16
    112e:	b7 01       	movw	r22, r14
    1130:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__fixsfsi>
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	b9 01       	movw	r22, r18
    113a:	ca 01       	movw	r24, r20
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	08 95       	ret

00001146 <_fpadd_parts>:
    1146:	a0 e0       	ldi	r26, 0x00	; 0
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e9 ea       	ldi	r30, 0xA9	; 169
    114c:	f8 e0       	ldi	r31, 0x08	; 8
    114e:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__prologue_saves__+0x8>
    1152:	fc 01       	movw	r30, r24
    1154:	ea 01       	movw	r28, r20
    1156:	80 81       	ld	r24, Z
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	08 f4       	brcc	.+2      	; 0x115e <_fpadd_parts+0x18>
    115c:	38 c1       	rjmp	.+624    	; 0x13ce <_fpadd_parts+0x288>
    115e:	db 01       	movw	r26, r22
    1160:	9c 91       	ld	r25, X
    1162:	92 30       	cpi	r25, 0x02	; 2
    1164:	08 f4       	brcc	.+2      	; 0x1168 <_fpadd_parts+0x22>
    1166:	30 c1       	rjmp	.+608    	; 0x13c8 <_fpadd_parts+0x282>
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	59 f4       	brne	.+22     	; 0x1182 <_fpadd_parts+0x3c>
    116c:	94 30       	cpi	r25, 0x04	; 4
    116e:	09 f0       	breq	.+2      	; 0x1172 <_fpadd_parts+0x2c>
    1170:	2e c1       	rjmp	.+604    	; 0x13ce <_fpadd_parts+0x288>
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	11 96       	adiw	r26, 0x01	; 1
    1176:	8c 91       	ld	r24, X
    1178:	11 97       	sbiw	r26, 0x01	; 1
    117a:	98 17       	cp	r25, r24
    117c:	09 f0       	breq	.+2      	; 0x1180 <_fpadd_parts+0x3a>
    117e:	21 c1       	rjmp	.+578    	; 0x13c2 <_fpadd_parts+0x27c>
    1180:	26 c1       	rjmp	.+588    	; 0x13ce <_fpadd_parts+0x288>
    1182:	94 30       	cpi	r25, 0x04	; 4
    1184:	09 f4       	brne	.+2      	; 0x1188 <_fpadd_parts+0x42>
    1186:	20 c1       	rjmp	.+576    	; 0x13c8 <_fpadd_parts+0x282>
    1188:	92 30       	cpi	r25, 0x02	; 2
    118a:	b1 f4       	brne	.+44     	; 0x11b8 <_fpadd_parts+0x72>
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	09 f0       	breq	.+2      	; 0x1192 <_fpadd_parts+0x4c>
    1190:	1e c1       	rjmp	.+572    	; 0x13ce <_fpadd_parts+0x288>
    1192:	ca 01       	movw	r24, r20
    1194:	af 01       	movw	r20, r30
    1196:	28 e0       	ldi	r18, 0x08	; 8
    1198:	da 01       	movw	r26, r20
    119a:	0d 90       	ld	r0, X+
    119c:	ad 01       	movw	r20, r26
    119e:	dc 01       	movw	r26, r24
    11a0:	0d 92       	st	X+, r0
    11a2:	cd 01       	movw	r24, r26
    11a4:	21 50       	subi	r18, 0x01	; 1
    11a6:	c1 f7       	brne	.-16     	; 0x1198 <_fpadd_parts+0x52>
    11a8:	db 01       	movw	r26, r22
    11aa:	11 96       	adiw	r26, 0x01	; 1
    11ac:	8c 91       	ld	r24, X
    11ae:	11 97       	sbiw	r26, 0x01	; 1
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	89 23       	and	r24, r25
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	0a c1       	rjmp	.+532    	; 0x13cc <_fpadd_parts+0x286>
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	09 f4       	brne	.+2      	; 0x11be <_fpadd_parts+0x78>
    11bc:	05 c1       	rjmp	.+522    	; 0x13c8 <_fpadd_parts+0x282>
    11be:	c2 80       	ldd	r12, Z+2	; 0x02
    11c0:	d3 80       	ldd	r13, Z+3	; 0x03
    11c2:	db 01       	movw	r26, r22
    11c4:	12 96       	adiw	r26, 0x02	; 2
    11c6:	6d 90       	ld	r6, X+
    11c8:	7c 90       	ld	r7, X
    11ca:	13 97       	sbiw	r26, 0x03	; 3
    11cc:	24 81       	ldd	r18, Z+4	; 0x04
    11ce:	35 81       	ldd	r19, Z+5	; 0x05
    11d0:	46 81       	ldd	r20, Z+6	; 0x06
    11d2:	57 81       	ldd	r21, Z+7	; 0x07
    11d4:	14 96       	adiw	r26, 0x04	; 4
    11d6:	ed 90       	ld	r14, X+
    11d8:	fd 90       	ld	r15, X+
    11da:	0d 91       	ld	r16, X+
    11dc:	1c 91       	ld	r17, X
    11de:	17 97       	sbiw	r26, 0x07	; 7
    11e0:	c6 01       	movw	r24, r12
    11e2:	86 19       	sub	r24, r6
    11e4:	97 09       	sbc	r25, r7
    11e6:	5c 01       	movw	r10, r24
    11e8:	97 ff       	sbrs	r25, 7
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <_fpadd_parts+0xae>
    11ec:	aa 24       	eor	r10, r10
    11ee:	bb 24       	eor	r11, r11
    11f0:	a8 1a       	sub	r10, r24
    11f2:	b9 0a       	sbc	r11, r25
    11f4:	b0 e2       	ldi	r27, 0x20	; 32
    11f6:	ab 16       	cp	r10, r27
    11f8:	b1 04       	cpc	r11, r1
    11fa:	0c f0       	brlt	.+2      	; 0x11fe <_fpadd_parts+0xb8>
    11fc:	61 c0       	rjmp	.+194    	; 0x12c0 <_fpadd_parts+0x17a>
    11fe:	18 16       	cp	r1, r24
    1200:	19 06       	cpc	r1, r25
    1202:	6c f5       	brge	.+90     	; 0x125e <_fpadd_parts+0x118>
    1204:	37 01       	movw	r6, r14
    1206:	48 01       	movw	r8, r16
    1208:	0a 2c       	mov	r0, r10
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <_fpadd_parts+0xce>
    120c:	96 94       	lsr	r9
    120e:	87 94       	ror	r8
    1210:	77 94       	ror	r7
    1212:	67 94       	ror	r6
    1214:	0a 94       	dec	r0
    1216:	d2 f7       	brpl	.-12     	; 0x120c <_fpadd_parts+0xc6>
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a0 e0       	ldi	r26, 0x00	; 0
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	0a 2c       	mov	r0, r10
    1222:	04 c0       	rjmp	.+8      	; 0x122c <_fpadd_parts+0xe6>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	aa 1f       	adc	r26, r26
    122a:	bb 1f       	adc	r27, r27
    122c:	0a 94       	dec	r0
    122e:	d2 f7       	brpl	.-12     	; 0x1224 <_fpadd_parts+0xde>
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	a1 09       	sbc	r26, r1
    1234:	b1 09       	sbc	r27, r1
    1236:	8e 21       	and	r24, r14
    1238:	9f 21       	and	r25, r15
    123a:	a0 23       	and	r26, r16
    123c:	b1 23       	and	r27, r17
    123e:	ee 24       	eor	r14, r14
    1240:	ff 24       	eor	r15, r15
    1242:	87 01       	movw	r16, r14
    1244:	e3 94       	inc	r14
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	a1 05       	cpc	r26, r1
    124a:	b1 05       	cpc	r27, r1
    124c:	19 f4       	brne	.+6      	; 0x1254 <_fpadd_parts+0x10e>
    124e:	ee 24       	eor	r14, r14
    1250:	ff 24       	eor	r15, r15
    1252:	87 01       	movw	r16, r14
    1254:	e6 28       	or	r14, r6
    1256:	f7 28       	or	r15, r7
    1258:	08 29       	or	r16, r8
    125a:	19 29       	or	r17, r9
    125c:	3c c0       	rjmp	.+120    	; 0x12d6 <_fpadd_parts+0x190>
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	d1 f1       	breq	.+116    	; 0x12d6 <_fpadd_parts+0x190>
    1262:	ca 0c       	add	r12, r10
    1264:	db 1c       	adc	r13, r11
    1266:	39 01       	movw	r6, r18
    1268:	4a 01       	movw	r8, r20
    126a:	0a 2c       	mov	r0, r10
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <_fpadd_parts+0x130>
    126e:	96 94       	lsr	r9
    1270:	87 94       	ror	r8
    1272:	77 94       	ror	r7
    1274:	67 94       	ror	r6
    1276:	0a 94       	dec	r0
    1278:	d2 f7       	brpl	.-12     	; 0x126e <_fpadd_parts+0x128>
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	0a 2c       	mov	r0, r10
    1284:	04 c0       	rjmp	.+8      	; 0x128e <_fpadd_parts+0x148>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	aa 1f       	adc	r26, r26
    128c:	bb 1f       	adc	r27, r27
    128e:	0a 94       	dec	r0
    1290:	d2 f7       	brpl	.-12     	; 0x1286 <_fpadd_parts+0x140>
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	a1 09       	sbc	r26, r1
    1296:	b1 09       	sbc	r27, r1
    1298:	82 23       	and	r24, r18
    129a:	93 23       	and	r25, r19
    129c:	a4 23       	and	r26, r20
    129e:	b5 23       	and	r27, r21
    12a0:	21 e0       	ldi	r18, 0x01	; 1
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	a1 05       	cpc	r26, r1
    12ac:	b1 05       	cpc	r27, r1
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <_fpadd_parts+0x170>
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	a9 01       	movw	r20, r18
    12b6:	26 29       	or	r18, r6
    12b8:	37 29       	or	r19, r7
    12ba:	48 29       	or	r20, r8
    12bc:	59 29       	or	r21, r9
    12be:	0b c0       	rjmp	.+22     	; 0x12d6 <_fpadd_parts+0x190>
    12c0:	6c 14       	cp	r6, r12
    12c2:	7d 04       	cpc	r7, r13
    12c4:	24 f4       	brge	.+8      	; 0x12ce <_fpadd_parts+0x188>
    12c6:	ee 24       	eor	r14, r14
    12c8:	ff 24       	eor	r15, r15
    12ca:	87 01       	movw	r16, r14
    12cc:	04 c0       	rjmp	.+8      	; 0x12d6 <_fpadd_parts+0x190>
    12ce:	63 01       	movw	r12, r6
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	a9 01       	movw	r20, r18
    12d6:	81 81       	ldd	r24, Z+1	; 0x01
    12d8:	fb 01       	movw	r30, r22
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	89 17       	cp	r24, r25
    12de:	09 f4       	brne	.+2      	; 0x12e2 <_fpadd_parts+0x19c>
    12e0:	45 c0       	rjmp	.+138    	; 0x136c <_fpadd_parts+0x226>
    12e2:	88 23       	and	r24, r24
    12e4:	49 f0       	breq	.+18     	; 0x12f8 <_fpadd_parts+0x1b2>
    12e6:	d8 01       	movw	r26, r16
    12e8:	c7 01       	movw	r24, r14
    12ea:	82 1b       	sub	r24, r18
    12ec:	93 0b       	sbc	r25, r19
    12ee:	a4 0b       	sbc	r26, r20
    12f0:	b5 0b       	sbc	r27, r21
    12f2:	9c 01       	movw	r18, r24
    12f4:	ad 01       	movw	r20, r26
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <_fpadd_parts+0x1ba>
    12f8:	2e 19       	sub	r18, r14
    12fa:	3f 09       	sbc	r19, r15
    12fc:	40 0b       	sbc	r20, r16
    12fe:	51 0b       	sbc	r21, r17
    1300:	57 fd       	sbrc	r21, 7
    1302:	04 c0       	rjmp	.+8      	; 0x130c <_fpadd_parts+0x1c6>
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	db 82       	std	Y+3, r13	; 0x03
    1308:	ca 82       	std	Y+2, r12	; 0x02
    130a:	0b c0       	rjmp	.+22     	; 0x1322 <_fpadd_parts+0x1dc>
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	db 82       	std	Y+3, r13	; 0x03
    1312:	ca 82       	std	Y+2, r12	; 0x02
    1314:	50 95       	com	r21
    1316:	40 95       	com	r20
    1318:	30 95       	com	r19
    131a:	21 95       	neg	r18
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	4f 4f       	sbci	r20, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	2c 83       	std	Y+4, r18	; 0x04
    1324:	3d 83       	std	Y+5, r19	; 0x05
    1326:	4e 83       	std	Y+6, r20	; 0x06
    1328:	5f 83       	std	Y+7, r21	; 0x07
    132a:	0d c0       	rjmp	.+26     	; 0x1346 <_fpadd_parts+0x200>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	aa 1f       	adc	r26, r26
    1332:	bb 1f       	adc	r27, r27
    1334:	8c 83       	std	Y+4, r24	; 0x04
    1336:	9d 83       	std	Y+5, r25	; 0x05
    1338:	ae 83       	std	Y+6, r26	; 0x06
    133a:	bf 83       	std	Y+7, r27	; 0x07
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	9b 81       	ldd	r25, Y+3	; 0x03
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9b 83       	std	Y+3, r25	; 0x03
    1344:	8a 83       	std	Y+2, r24	; 0x02
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	ae 81       	ldd	r26, Y+6	; 0x06
    134c:	bf 81       	ldd	r27, Y+7	; 0x07
    134e:	9c 01       	movw	r18, r24
    1350:	ad 01       	movw	r20, r26
    1352:	21 50       	subi	r18, 0x01	; 1
    1354:	30 40       	sbci	r19, 0x00	; 0
    1356:	40 40       	sbci	r20, 0x00	; 0
    1358:	50 40       	sbci	r21, 0x00	; 0
    135a:	2f 3f       	cpi	r18, 0xFF	; 255
    135c:	ef ef       	ldi	r30, 0xFF	; 255
    135e:	3e 07       	cpc	r19, r30
    1360:	ef ef       	ldi	r30, 0xFF	; 255
    1362:	4e 07       	cpc	r20, r30
    1364:	ef e3       	ldi	r30, 0x3F	; 63
    1366:	5e 07       	cpc	r21, r30
    1368:	08 f3       	brcs	.-62     	; 0x132c <_fpadd_parts+0x1e6>
    136a:	0b c0       	rjmp	.+22     	; 0x1382 <_fpadd_parts+0x23c>
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	db 82       	std	Y+3, r13	; 0x03
    1370:	ca 82       	std	Y+2, r12	; 0x02
    1372:	2e 0d       	add	r18, r14
    1374:	3f 1d       	adc	r19, r15
    1376:	40 1f       	adc	r20, r16
    1378:	51 1f       	adc	r21, r17
    137a:	2c 83       	std	Y+4, r18	; 0x04
    137c:	3d 83       	std	Y+5, r19	; 0x05
    137e:	4e 83       	std	Y+6, r20	; 0x06
    1380:	5f 83       	std	Y+7, r21	; 0x07
    1382:	83 e0       	ldi	r24, 0x03	; 3
    1384:	88 83       	st	Y, r24
    1386:	2c 81       	ldd	r18, Y+4	; 0x04
    1388:	3d 81       	ldd	r19, Y+5	; 0x05
    138a:	4e 81       	ldd	r20, Y+6	; 0x06
    138c:	5f 81       	ldd	r21, Y+7	; 0x07
    138e:	57 ff       	sbrs	r21, 7
    1390:	1d c0       	rjmp	.+58     	; 0x13cc <_fpadd_parts+0x286>
    1392:	da 01       	movw	r26, r20
    1394:	c9 01       	movw	r24, r18
    1396:	81 70       	andi	r24, 0x01	; 1
    1398:	90 70       	andi	r25, 0x00	; 0
    139a:	a0 70       	andi	r26, 0x00	; 0
    139c:	b0 70       	andi	r27, 0x00	; 0
    139e:	56 95       	lsr	r21
    13a0:	47 95       	ror	r20
    13a2:	37 95       	ror	r19
    13a4:	27 95       	ror	r18
    13a6:	82 2b       	or	r24, r18
    13a8:	93 2b       	or	r25, r19
    13aa:	a4 2b       	or	r26, r20
    13ac:	b5 2b       	or	r27, r21
    13ae:	8c 83       	std	Y+4, r24	; 0x04
    13b0:	9d 83       	std	Y+5, r25	; 0x05
    13b2:	ae 83       	std	Y+6, r26	; 0x06
    13b4:	bf 83       	std	Y+7, r27	; 0x07
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	9b 83       	std	Y+3, r25	; 0x03
    13be:	8a 83       	std	Y+2, r24	; 0x02
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <_fpadd_parts+0x286>
    13c2:	e1 e0       	ldi	r30, 0x01	; 1
    13c4:	f2 e0       	ldi	r31, 0x02	; 2
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <_fpadd_parts+0x288>
    13c8:	fb 01       	movw	r30, r22
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <_fpadd_parts+0x288>
    13cc:	fe 01       	movw	r30, r28
    13ce:	cf 01       	movw	r24, r30
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	ee e0       	ldi	r30, 0x0E	; 14
    13d6:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__epilogue_restores__+0x8>

000013da <__addsf3>:
    13da:	a0 e2       	ldi	r26, 0x20	; 32
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e3 ef       	ldi	r30, 0xF3	; 243
    13e0:	f9 e0       	ldi	r31, 0x09	; 9
    13e2:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__prologue_saves__+0x18>
    13e6:	69 83       	std	Y+1, r22	; 0x01
    13e8:	7a 83       	std	Y+2, r23	; 0x02
    13ea:	8b 83       	std	Y+3, r24	; 0x03
    13ec:	9c 83       	std	Y+4, r25	; 0x04
    13ee:	2d 83       	std	Y+5, r18	; 0x05
    13f0:	3e 83       	std	Y+6, r19	; 0x06
    13f2:	4f 83       	std	Y+7, r20	; 0x07
    13f4:	58 87       	std	Y+8, r21	; 0x08
    13f6:	89 e0       	ldi	r24, 0x09	; 9
    13f8:	e8 2e       	mov	r14, r24
    13fa:	f1 2c       	mov	r15, r1
    13fc:	ec 0e       	add	r14, r28
    13fe:	fd 1e       	adc	r15, r29
    1400:	ce 01       	movw	r24, r28
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	b7 01       	movw	r22, r14
    1406:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    140a:	8e 01       	movw	r16, r28
    140c:	0f 5e       	subi	r16, 0xEF	; 239
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	ce 01       	movw	r24, r28
    1412:	05 96       	adiw	r24, 0x05	; 5
    1414:	b8 01       	movw	r22, r16
    1416:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    141a:	c7 01       	movw	r24, r14
    141c:	b8 01       	movw	r22, r16
    141e:	ae 01       	movw	r20, r28
    1420:	47 5e       	subi	r20, 0xE7	; 231
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	0e 94 a3 08 	call	0x1146	; 0x1146 <_fpadd_parts>
    1428:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__pack_f>
    142c:	a0 96       	adiw	r28, 0x20	; 32
    142e:	e6 e0       	ldi	r30, 0x06	; 6
    1430:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__epilogue_restores__+0x18>

00001434 <__subsf3>:
    1434:	a0 e2       	ldi	r26, 0x20	; 32
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e0 e2       	ldi	r30, 0x20	; 32
    143a:	fa e0       	ldi	r31, 0x0A	; 10
    143c:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__prologue_saves__+0x18>
    1440:	69 83       	std	Y+1, r22	; 0x01
    1442:	7a 83       	std	Y+2, r23	; 0x02
    1444:	8b 83       	std	Y+3, r24	; 0x03
    1446:	9c 83       	std	Y+4, r25	; 0x04
    1448:	2d 83       	std	Y+5, r18	; 0x05
    144a:	3e 83       	std	Y+6, r19	; 0x06
    144c:	4f 83       	std	Y+7, r20	; 0x07
    144e:	58 87       	std	Y+8, r21	; 0x08
    1450:	8e 01       	movw	r16, r28
    1452:	07 5f       	subi	r16, 0xF7	; 247
    1454:	1f 4f       	sbci	r17, 0xFF	; 255
    1456:	ce 01       	movw	r24, r28
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	b8 01       	movw	r22, r16
    145c:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    1460:	91 e1       	ldi	r25, 0x11	; 17
    1462:	e9 2e       	mov	r14, r25
    1464:	f1 2c       	mov	r15, r1
    1466:	ec 0e       	add	r14, r28
    1468:	fd 1e       	adc	r15, r29
    146a:	ce 01       	movw	r24, r28
    146c:	05 96       	adiw	r24, 0x05	; 5
    146e:	b7 01       	movw	r22, r14
    1470:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    1474:	8a 89       	ldd	r24, Y+18	; 0x12
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	89 27       	eor	r24, r25
    147a:	8a 8b       	std	Y+18, r24	; 0x12
    147c:	c8 01       	movw	r24, r16
    147e:	b7 01       	movw	r22, r14
    1480:	ae 01       	movw	r20, r28
    1482:	47 5e       	subi	r20, 0xE7	; 231
    1484:	5f 4f       	sbci	r21, 0xFF	; 255
    1486:	0e 94 a3 08 	call	0x1146	; 0x1146 <_fpadd_parts>
    148a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__pack_f>
    148e:	a0 96       	adiw	r28, 0x20	; 32
    1490:	e6 e0       	ldi	r30, 0x06	; 6
    1492:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__epilogue_restores__+0x18>

00001496 <__mulsf3>:
    1496:	a0 e2       	ldi	r26, 0x20	; 32
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e1 e5       	ldi	r30, 0x51	; 81
    149c:	fa e0       	ldi	r31, 0x0A	; 10
    149e:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <__prologue_saves__>
    14a2:	69 83       	std	Y+1, r22	; 0x01
    14a4:	7a 83       	std	Y+2, r23	; 0x02
    14a6:	8b 83       	std	Y+3, r24	; 0x03
    14a8:	9c 83       	std	Y+4, r25	; 0x04
    14aa:	2d 83       	std	Y+5, r18	; 0x05
    14ac:	3e 83       	std	Y+6, r19	; 0x06
    14ae:	4f 83       	std	Y+7, r20	; 0x07
    14b0:	58 87       	std	Y+8, r21	; 0x08
    14b2:	ce 01       	movw	r24, r28
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	be 01       	movw	r22, r28
    14b8:	67 5f       	subi	r22, 0xF7	; 247
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    14c0:	ce 01       	movw	r24, r28
    14c2:	05 96       	adiw	r24, 0x05	; 5
    14c4:	be 01       	movw	r22, r28
    14c6:	6f 5e       	subi	r22, 0xEF	; 239
    14c8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ca:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    14ce:	99 85       	ldd	r25, Y+9	; 0x09
    14d0:	92 30       	cpi	r25, 0x02	; 2
    14d2:	78 f0       	brcs	.+30     	; 0x14f2 <__mulsf3+0x5c>
    14d4:	89 89       	ldd	r24, Y+17	; 0x11
    14d6:	82 30       	cpi	r24, 0x02	; 2
    14d8:	c0 f0       	brcs	.+48     	; 0x150a <__mulsf3+0x74>
    14da:	94 30       	cpi	r25, 0x04	; 4
    14dc:	19 f4       	brne	.+6      	; 0x14e4 <__mulsf3+0x4e>
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	41 f4       	brne	.+16     	; 0x14f2 <__mulsf3+0x5c>
    14e2:	cb c0       	rjmp	.+406    	; 0x167a <__mulsf3+0x1e4>
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	19 f4       	brne	.+6      	; 0x14ee <__mulsf3+0x58>
    14e8:	92 30       	cpi	r25, 0x02	; 2
    14ea:	79 f4       	brne	.+30     	; 0x150a <__mulsf3+0x74>
    14ec:	c6 c0       	rjmp	.+396    	; 0x167a <__mulsf3+0x1e4>
    14ee:	92 30       	cpi	r25, 0x02	; 2
    14f0:	51 f4       	brne	.+20     	; 0x1506 <__mulsf3+0x70>
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    14f6:	9a 89       	ldd	r25, Y+18	; 0x12
    14f8:	29 17       	cp	r18, r25
    14fa:	09 f4       	brne	.+2      	; 0x14fe <__mulsf3+0x68>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	8a 87       	std	Y+10, r24	; 0x0a
    1500:	ce 01       	movw	r24, r28
    1502:	09 96       	adiw	r24, 0x09	; 9
    1504:	bc c0       	rjmp	.+376    	; 0x167e <__mulsf3+0x1e8>
    1506:	82 30       	cpi	r24, 0x02	; 2
    1508:	51 f4       	brne	.+20     	; 0x151e <__mulsf3+0x88>
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	2a 85       	ldd	r18, Y+10	; 0x0a
    150e:	9a 89       	ldd	r25, Y+18	; 0x12
    1510:	29 17       	cp	r18, r25
    1512:	09 f4       	brne	.+2      	; 0x1516 <__mulsf3+0x80>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	8a 8b       	std	Y+18, r24	; 0x12
    1518:	ce 01       	movw	r24, r28
    151a:	41 96       	adiw	r24, 0x11	; 17
    151c:	b0 c0       	rjmp	.+352    	; 0x167e <__mulsf3+0x1e8>
    151e:	6d 84       	ldd	r6, Y+13	; 0x0d
    1520:	7e 84       	ldd	r7, Y+14	; 0x0e
    1522:	8f 84       	ldd	r8, Y+15	; 0x0f
    1524:	98 88       	ldd	r9, Y+16	; 0x10
    1526:	ed 88       	ldd	r14, Y+21	; 0x15
    1528:	fe 88       	ldd	r15, Y+22	; 0x16
    152a:	0f 89       	ldd	r16, Y+23	; 0x17
    152c:	18 8d       	ldd	r17, Y+24	; 0x18
    152e:	e0 e2       	ldi	r30, 0x20	; 32
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	dc 01       	movw	r26, r24
    1538:	aa 24       	eor	r10, r10
    153a:	bb 24       	eor	r11, r11
    153c:	65 01       	movw	r12, r10
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	a9 01       	movw	r20, r18
    1544:	b3 01       	movw	r22, r6
    1546:	61 70       	andi	r22, 0x01	; 1
    1548:	70 70       	andi	r23, 0x00	; 0
    154a:	61 15       	cp	r22, r1
    154c:	71 05       	cpc	r23, r1
    154e:	d1 f0       	breq	.+52     	; 0x1584 <__mulsf3+0xee>
    1550:	2e 0d       	add	r18, r14
    1552:	3f 1d       	adc	r19, r15
    1554:	40 1f       	adc	r20, r16
    1556:	51 1f       	adc	r21, r17
    1558:	15 01       	movw	r2, r10
    155a:	26 01       	movw	r4, r12
    155c:	28 0e       	add	r2, r24
    155e:	39 1e       	adc	r3, r25
    1560:	4a 1e       	adc	r4, r26
    1562:	5b 1e       	adc	r5, r27
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a0 e0       	ldi	r26, 0x00	; 0
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	2e 15       	cp	r18, r14
    156e:	3f 05       	cpc	r19, r15
    1570:	40 07       	cpc	r20, r16
    1572:	51 07       	cpc	r21, r17
    1574:	18 f0       	brcs	.+6      	; 0x157c <__mulsf3+0xe6>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	dc 01       	movw	r26, r24
    157c:	82 0d       	add	r24, r2
    157e:	93 1d       	adc	r25, r3
    1580:	a4 1d       	adc	r26, r4
    1582:	b5 1d       	adc	r27, r5
    1584:	aa 0c       	add	r10, r10
    1586:	bb 1c       	adc	r11, r11
    1588:	cc 1c       	adc	r12, r12
    158a:	dd 1c       	adc	r13, r13
    158c:	17 ff       	sbrs	r17, 7
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <__mulsf3+0x10c>
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	26 2e       	mov	r2, r22
    1594:	31 2c       	mov	r3, r1
    1596:	41 2c       	mov	r4, r1
    1598:	51 2c       	mov	r5, r1
    159a:	a2 28       	or	r10, r2
    159c:	b3 28       	or	r11, r3
    159e:	c4 28       	or	r12, r4
    15a0:	d5 28       	or	r13, r5
    15a2:	31 97       	sbiw	r30, 0x01	; 1
    15a4:	49 f0       	breq	.+18     	; 0x15b8 <__mulsf3+0x122>
    15a6:	ee 0c       	add	r14, r14
    15a8:	ff 1c       	adc	r15, r15
    15aa:	00 1f       	adc	r16, r16
    15ac:	11 1f       	adc	r17, r17
    15ae:	96 94       	lsr	r9
    15b0:	87 94       	ror	r8
    15b2:	77 94       	ror	r7
    15b4:	67 94       	ror	r6
    15b6:	c6 cf       	rjmp	.-116    	; 0x1544 <__mulsf3+0xae>
    15b8:	6b 89       	ldd	r22, Y+19	; 0x13
    15ba:	7c 89       	ldd	r23, Y+20	; 0x14
    15bc:	eb 85       	ldd	r30, Y+11	; 0x0b
    15be:	fc 85       	ldd	r31, Y+12	; 0x0c
    15c0:	6e 0f       	add	r22, r30
    15c2:	7f 1f       	adc	r23, r31
    15c4:	6e 5f       	subi	r22, 0xFE	; 254
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	7c 8f       	std	Y+28, r23	; 0x1c
    15ca:	6b 8f       	std	Y+27, r22	; 0x1b
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    15d0:	7a 89       	ldd	r23, Y+18	; 0x12
    15d2:	e7 17       	cp	r30, r23
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <__mulsf3+0x142>
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	6a 8f       	std	Y+26, r22	; 0x1a
    15da:	6b 8d       	ldd	r22, Y+27	; 0x1b
    15dc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    15de:	10 c0       	rjmp	.+32     	; 0x1600 <__mulsf3+0x16a>
    15e0:	fc 01       	movw	r30, r24
    15e2:	e1 70       	andi	r30, 0x01	; 1
    15e4:	f0 70       	andi	r31, 0x00	; 0
    15e6:	30 97       	sbiw	r30, 0x00	; 0
    15e8:	29 f0       	breq	.+10     	; 0x15f4 <__mulsf3+0x15e>
    15ea:	56 95       	lsr	r21
    15ec:	47 95       	ror	r20
    15ee:	37 95       	ror	r19
    15f0:	27 95       	ror	r18
    15f2:	50 68       	ori	r21, 0x80	; 128
    15f4:	b6 95       	lsr	r27
    15f6:	a7 95       	ror	r26
    15f8:	97 95       	ror	r25
    15fa:	87 95       	ror	r24
    15fc:	6f 5f       	subi	r22, 0xFF	; 255
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	b7 fd       	sbrc	r27, 7
    1602:	ee cf       	rjmp	.-36     	; 0x15e0 <__mulsf3+0x14a>
    1604:	0c c0       	rjmp	.+24     	; 0x161e <__mulsf3+0x188>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	aa 1f       	adc	r26, r26
    160c:	bb 1f       	adc	r27, r27
    160e:	57 fd       	sbrc	r21, 7
    1610:	81 60       	ori	r24, 0x01	; 1
    1612:	22 0f       	add	r18, r18
    1614:	33 1f       	adc	r19, r19
    1616:	44 1f       	adc	r20, r20
    1618:	55 1f       	adc	r21, r21
    161a:	61 50       	subi	r22, 0x01	; 1
    161c:	70 40       	sbci	r23, 0x00	; 0
    161e:	80 30       	cpi	r24, 0x00	; 0
    1620:	e0 e0       	ldi	r30, 0x00	; 0
    1622:	9e 07       	cpc	r25, r30
    1624:	e0 e0       	ldi	r30, 0x00	; 0
    1626:	ae 07       	cpc	r26, r30
    1628:	e0 e4       	ldi	r30, 0x40	; 64
    162a:	be 07       	cpc	r27, r30
    162c:	60 f3       	brcs	.-40     	; 0x1606 <__mulsf3+0x170>
    162e:	6b 8f       	std	Y+27, r22	; 0x1b
    1630:	7c 8f       	std	Y+28, r23	; 0x1c
    1632:	6f e7       	ldi	r22, 0x7F	; 127
    1634:	e6 2e       	mov	r14, r22
    1636:	f1 2c       	mov	r15, r1
    1638:	01 2d       	mov	r16, r1
    163a:	11 2d       	mov	r17, r1
    163c:	e8 22       	and	r14, r24
    163e:	f9 22       	and	r15, r25
    1640:	0a 23       	and	r16, r26
    1642:	1b 23       	and	r17, r27
    1644:	60 e4       	ldi	r22, 0x40	; 64
    1646:	e6 16       	cp	r14, r22
    1648:	f1 04       	cpc	r15, r1
    164a:	01 05       	cpc	r16, r1
    164c:	11 05       	cpc	r17, r1
    164e:	61 f4       	brne	.+24     	; 0x1668 <__mulsf3+0x1d2>
    1650:	87 fd       	sbrc	r24, 7
    1652:	0a c0       	rjmp	.+20     	; 0x1668 <__mulsf3+0x1d2>
    1654:	21 15       	cp	r18, r1
    1656:	31 05       	cpc	r19, r1
    1658:	41 05       	cpc	r20, r1
    165a:	51 05       	cpc	r21, r1
    165c:	29 f0       	breq	.+10     	; 0x1668 <__mulsf3+0x1d2>
    165e:	80 5c       	subi	r24, 0xC0	; 192
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	af 4f       	sbci	r26, 0xFF	; 255
    1664:	bf 4f       	sbci	r27, 0xFF	; 255
    1666:	80 78       	andi	r24, 0x80	; 128
    1668:	8d 8f       	std	Y+29, r24	; 0x1d
    166a:	9e 8f       	std	Y+30, r25	; 0x1e
    166c:	af 8f       	std	Y+31, r26	; 0x1f
    166e:	b8 a3       	std	Y+32, r27	; 0x20
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	89 8f       	std	Y+25, r24	; 0x19
    1674:	ce 01       	movw	r24, r28
    1676:	49 96       	adiw	r24, 0x19	; 25
    1678:	02 c0       	rjmp	.+4      	; 0x167e <__mulsf3+0x1e8>
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	92 e0       	ldi	r25, 0x02	; 2
    167e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__pack_f>
    1682:	a0 96       	adiw	r28, 0x20	; 32
    1684:	e2 e1       	ldi	r30, 0x12	; 18
    1686:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__epilogue_restores__>

0000168a <__gtsf2>:
    168a:	a8 e1       	ldi	r26, 0x18	; 24
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	eb e4       	ldi	r30, 0x4B	; 75
    1690:	fb e0       	ldi	r31, 0x0B	; 11
    1692:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__prologue_saves__+0x18>
    1696:	69 83       	std	Y+1, r22	; 0x01
    1698:	7a 83       	std	Y+2, r23	; 0x02
    169a:	8b 83       	std	Y+3, r24	; 0x03
    169c:	9c 83       	std	Y+4, r25	; 0x04
    169e:	2d 83       	std	Y+5, r18	; 0x05
    16a0:	3e 83       	std	Y+6, r19	; 0x06
    16a2:	4f 83       	std	Y+7, r20	; 0x07
    16a4:	58 87       	std	Y+8, r21	; 0x08
    16a6:	8e 01       	movw	r16, r28
    16a8:	07 5f       	subi	r16, 0xF7	; 247
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	ce 01       	movw	r24, r28
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	b8 01       	movw	r22, r16
    16b2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    16b6:	81 e1       	ldi	r24, 0x11	; 17
    16b8:	e8 2e       	mov	r14, r24
    16ba:	f1 2c       	mov	r15, r1
    16bc:	ec 0e       	add	r14, r28
    16be:	fd 1e       	adc	r15, r29
    16c0:	ce 01       	movw	r24, r28
    16c2:	05 96       	adiw	r24, 0x05	; 5
    16c4:	b7 01       	movw	r22, r14
    16c6:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    16ca:	89 85       	ldd	r24, Y+9	; 0x09
    16cc:	82 30       	cpi	r24, 0x02	; 2
    16ce:	40 f0       	brcs	.+16     	; 0x16e0 <__gtsf2+0x56>
    16d0:	89 89       	ldd	r24, Y+17	; 0x11
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	28 f0       	brcs	.+10     	; 0x16e0 <__gtsf2+0x56>
    16d6:	c8 01       	movw	r24, r16
    16d8:	b7 01       	movw	r22, r14
    16da:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__fpcmp_parts_f>
    16de:	01 c0       	rjmp	.+2      	; 0x16e2 <__gtsf2+0x58>
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	68 96       	adiw	r28, 0x18	; 24
    16e4:	e6 e0       	ldi	r30, 0x06	; 6
    16e6:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__epilogue_restores__+0x18>

000016ea <__gesf2>:
    16ea:	a8 e1       	ldi	r26, 0x18	; 24
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	eb e7       	ldi	r30, 0x7B	; 123
    16f0:	fb e0       	ldi	r31, 0x0B	; 11
    16f2:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__prologue_saves__+0x18>
    16f6:	69 83       	std	Y+1, r22	; 0x01
    16f8:	7a 83       	std	Y+2, r23	; 0x02
    16fa:	8b 83       	std	Y+3, r24	; 0x03
    16fc:	9c 83       	std	Y+4, r25	; 0x04
    16fe:	2d 83       	std	Y+5, r18	; 0x05
    1700:	3e 83       	std	Y+6, r19	; 0x06
    1702:	4f 83       	std	Y+7, r20	; 0x07
    1704:	58 87       	std	Y+8, r21	; 0x08
    1706:	8e 01       	movw	r16, r28
    1708:	07 5f       	subi	r16, 0xF7	; 247
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	ce 01       	movw	r24, r28
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	b8 01       	movw	r22, r16
    1712:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    1716:	81 e1       	ldi	r24, 0x11	; 17
    1718:	e8 2e       	mov	r14, r24
    171a:	f1 2c       	mov	r15, r1
    171c:	ec 0e       	add	r14, r28
    171e:	fd 1e       	adc	r15, r29
    1720:	ce 01       	movw	r24, r28
    1722:	05 96       	adiw	r24, 0x05	; 5
    1724:	b7 01       	movw	r22, r14
    1726:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    172a:	89 85       	ldd	r24, Y+9	; 0x09
    172c:	82 30       	cpi	r24, 0x02	; 2
    172e:	40 f0       	brcs	.+16     	; 0x1740 <__gesf2+0x56>
    1730:	89 89       	ldd	r24, Y+17	; 0x11
    1732:	82 30       	cpi	r24, 0x02	; 2
    1734:	28 f0       	brcs	.+10     	; 0x1740 <__gesf2+0x56>
    1736:	c8 01       	movw	r24, r16
    1738:	b7 01       	movw	r22, r14
    173a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__fpcmp_parts_f>
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <__gesf2+0x58>
    1740:	8f ef       	ldi	r24, 0xFF	; 255
    1742:	68 96       	adiw	r28, 0x18	; 24
    1744:	e6 e0       	ldi	r30, 0x06	; 6
    1746:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__epilogue_restores__+0x18>

0000174a <__ltsf2>:
    174a:	a8 e1       	ldi	r26, 0x18	; 24
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	eb ea       	ldi	r30, 0xAB	; 171
    1750:	fb e0       	ldi	r31, 0x0B	; 11
    1752:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__prologue_saves__+0x18>
    1756:	69 83       	std	Y+1, r22	; 0x01
    1758:	7a 83       	std	Y+2, r23	; 0x02
    175a:	8b 83       	std	Y+3, r24	; 0x03
    175c:	9c 83       	std	Y+4, r25	; 0x04
    175e:	2d 83       	std	Y+5, r18	; 0x05
    1760:	3e 83       	std	Y+6, r19	; 0x06
    1762:	4f 83       	std	Y+7, r20	; 0x07
    1764:	58 87       	std	Y+8, r21	; 0x08
    1766:	8e 01       	movw	r16, r28
    1768:	07 5f       	subi	r16, 0xF7	; 247
    176a:	1f 4f       	sbci	r17, 0xFF	; 255
    176c:	ce 01       	movw	r24, r28
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	b8 01       	movw	r22, r16
    1772:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    1776:	81 e1       	ldi	r24, 0x11	; 17
    1778:	e8 2e       	mov	r14, r24
    177a:	f1 2c       	mov	r15, r1
    177c:	ec 0e       	add	r14, r28
    177e:	fd 1e       	adc	r15, r29
    1780:	ce 01       	movw	r24, r28
    1782:	05 96       	adiw	r24, 0x05	; 5
    1784:	b7 01       	movw	r22, r14
    1786:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	82 30       	cpi	r24, 0x02	; 2
    178e:	40 f0       	brcs	.+16     	; 0x17a0 <__ltsf2+0x56>
    1790:	89 89       	ldd	r24, Y+17	; 0x11
    1792:	82 30       	cpi	r24, 0x02	; 2
    1794:	28 f0       	brcs	.+10     	; 0x17a0 <__ltsf2+0x56>
    1796:	c8 01       	movw	r24, r16
    1798:	b7 01       	movw	r22, r14
    179a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__fpcmp_parts_f>
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <__ltsf2+0x58>
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	68 96       	adiw	r28, 0x18	; 24
    17a4:	e6 e0       	ldi	r30, 0x06	; 6
    17a6:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__epilogue_restores__+0x18>

000017aa <__fixsfsi>:
    17aa:	ac e0       	ldi	r26, 0x0C	; 12
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	eb ed       	ldi	r30, 0xDB	; 219
    17b0:	fb e0       	ldi	r31, 0x0B	; 11
    17b2:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__prologue_saves__+0x20>
    17b6:	69 83       	std	Y+1, r22	; 0x01
    17b8:	7a 83       	std	Y+2, r23	; 0x02
    17ba:	8b 83       	std	Y+3, r24	; 0x03
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	ce 01       	movw	r24, r28
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	be 01       	movw	r22, r28
    17c4:	6b 5f       	subi	r22, 0xFB	; 251
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__unpack_f>
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	81 f1       	breq	.+96     	; 0x1832 <__fixsfsi+0x88>
    17d2:	82 30       	cpi	r24, 0x02	; 2
    17d4:	70 f1       	brcs	.+92     	; 0x1832 <__fixsfsi+0x88>
    17d6:	84 30       	cpi	r24, 0x04	; 4
    17d8:	21 f4       	brne	.+8      	; 0x17e2 <__fixsfsi+0x38>
    17da:	8e 81       	ldd	r24, Y+6	; 0x06
    17dc:	88 23       	and	r24, r24
    17de:	69 f1       	breq	.+90     	; 0x183a <__fixsfsi+0x90>
    17e0:	0a c0       	rjmp	.+20     	; 0x17f6 <__fixsfsi+0x4c>
    17e2:	2f 81       	ldd	r18, Y+7	; 0x07
    17e4:	38 85       	ldd	r19, Y+8	; 0x08
    17e6:	37 fd       	sbrc	r19, 7
    17e8:	24 c0       	rjmp	.+72     	; 0x1832 <__fixsfsi+0x88>
    17ea:	6e 81       	ldd	r22, Y+6	; 0x06
    17ec:	2f 31       	cpi	r18, 0x1F	; 31
    17ee:	31 05       	cpc	r19, r1
    17f0:	3c f0       	brlt	.+14     	; 0x1800 <__fixsfsi+0x56>
    17f2:	66 23       	and	r22, r22
    17f4:	11 f1       	breq	.+68     	; 0x183a <__fixsfsi+0x90>
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	50 e8       	ldi	r21, 0x80	; 128
    17fe:	21 c0       	rjmp	.+66     	; 0x1842 <__fixsfsi+0x98>
    1800:	8e e1       	ldi	r24, 0x1E	; 30
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	82 1b       	sub	r24, r18
    1806:	93 0b       	sbc	r25, r19
    1808:	29 85       	ldd	r18, Y+9	; 0x09
    180a:	3a 85       	ldd	r19, Y+10	; 0x0a
    180c:	4b 85       	ldd	r20, Y+11	; 0x0b
    180e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1810:	04 c0       	rjmp	.+8      	; 0x181a <__fixsfsi+0x70>
    1812:	56 95       	lsr	r21
    1814:	47 95       	ror	r20
    1816:	37 95       	ror	r19
    1818:	27 95       	ror	r18
    181a:	8a 95       	dec	r24
    181c:	d2 f7       	brpl	.-12     	; 0x1812 <__fixsfsi+0x68>
    181e:	66 23       	and	r22, r22
    1820:	81 f0       	breq	.+32     	; 0x1842 <__fixsfsi+0x98>
    1822:	50 95       	com	r21
    1824:	40 95       	com	r20
    1826:	30 95       	com	r19
    1828:	21 95       	neg	r18
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	4f 4f       	sbci	r20, 0xFF	; 255
    182e:	5f 4f       	sbci	r21, 0xFF	; 255
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <__fixsfsi+0x98>
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	a9 01       	movw	r20, r18
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <__fixsfsi+0x98>
    183a:	2f ef       	ldi	r18, 0xFF	; 255
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f ef       	ldi	r20, 0xFF	; 255
    1840:	5f e7       	ldi	r21, 0x7F	; 127
    1842:	b9 01       	movw	r22, r18
    1844:	ca 01       	movw	r24, r20
    1846:	2c 96       	adiw	r28, 0x0c	; 12
    1848:	e2 e0       	ldi	r30, 0x02	; 2
    184a:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__epilogue_restores__+0x20>

0000184e <__floatunsisf>:
    184e:	a8 e0       	ldi	r26, 0x08	; 8
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	ed e2       	ldi	r30, 0x2D	; 45
    1854:	fc e0       	ldi	r31, 0x0C	; 12
    1856:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__prologue_saves__+0x14>
    185a:	7b 01       	movw	r14, r22
    185c:	8c 01       	movw	r16, r24
    185e:	1a 82       	std	Y+2, r1	; 0x02
    1860:	61 15       	cp	r22, r1
    1862:	71 05       	cpc	r23, r1
    1864:	81 05       	cpc	r24, r1
    1866:	91 05       	cpc	r25, r1
    1868:	19 f4       	brne	.+6      	; 0x1870 <__floatunsisf+0x22>
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	5f c0       	rjmp	.+190    	; 0x192e <__floatunsisf+0xe0>
    1870:	83 e0       	ldi	r24, 0x03	; 3
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	8e e1       	ldi	r24, 0x1E	; 30
    1876:	c8 2e       	mov	r12, r24
    1878:	d1 2c       	mov	r13, r1
    187a:	dc 82       	std	Y+4, r13	; 0x04
    187c:	cb 82       	std	Y+3, r12	; 0x03
    187e:	ed 82       	std	Y+5, r14	; 0x05
    1880:	fe 82       	std	Y+6, r15	; 0x06
    1882:	0f 83       	std	Y+7, r16	; 0x07
    1884:	18 87       	std	Y+8, r17	; 0x08
    1886:	c8 01       	movw	r24, r16
    1888:	b7 01       	movw	r22, r14
    188a:	0e 94 9f 0c 	call	0x193e	; 0x193e <__clzsi2>
    188e:	fc 01       	movw	r30, r24
    1890:	31 97       	sbiw	r30, 0x01	; 1
    1892:	f7 ff       	sbrs	r31, 7
    1894:	3a c0       	rjmp	.+116    	; 0x190a <__floatunsisf+0xbc>
    1896:	aa 27       	eor	r26, r26
    1898:	bb 27       	eor	r27, r27
    189a:	ae 1b       	sub	r26, r30
    189c:	bf 0b       	sbc	r27, r31
    189e:	21 e0       	ldi	r18, 0x01	; 1
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	0a 2e       	mov	r0, r26
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <__floatunsisf+0x64>
    18aa:	22 0f       	add	r18, r18
    18ac:	33 1f       	adc	r19, r19
    18ae:	44 1f       	adc	r20, r20
    18b0:	55 1f       	adc	r21, r21
    18b2:	0a 94       	dec	r0
    18b4:	d2 f7       	brpl	.-12     	; 0x18aa <__floatunsisf+0x5c>
    18b6:	21 50       	subi	r18, 0x01	; 1
    18b8:	30 40       	sbci	r19, 0x00	; 0
    18ba:	40 40       	sbci	r20, 0x00	; 0
    18bc:	50 40       	sbci	r21, 0x00	; 0
    18be:	2e 21       	and	r18, r14
    18c0:	3f 21       	and	r19, r15
    18c2:	40 23       	and	r20, r16
    18c4:	51 23       	and	r21, r17
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	21 15       	cp	r18, r1
    18d0:	31 05       	cpc	r19, r1
    18d2:	41 05       	cpc	r20, r1
    18d4:	51 05       	cpc	r21, r1
    18d6:	19 f4       	brne	.+6      	; 0x18de <__floatunsisf+0x90>
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	cb 01       	movw	r24, r22
    18de:	04 c0       	rjmp	.+8      	; 0x18e8 <__floatunsisf+0x9a>
    18e0:	16 95       	lsr	r17
    18e2:	07 95       	ror	r16
    18e4:	f7 94       	ror	r15
    18e6:	e7 94       	ror	r14
    18e8:	aa 95       	dec	r26
    18ea:	d2 f7       	brpl	.-12     	; 0x18e0 <__floatunsisf+0x92>
    18ec:	e6 2a       	or	r14, r22
    18ee:	f7 2a       	or	r15, r23
    18f0:	08 2b       	or	r16, r24
    18f2:	19 2b       	or	r17, r25
    18f4:	ed 82       	std	Y+5, r14	; 0x05
    18f6:	fe 82       	std	Y+6, r15	; 0x06
    18f8:	0f 83       	std	Y+7, r16	; 0x07
    18fa:	18 87       	std	Y+8, r17	; 0x08
    18fc:	8e e1       	ldi	r24, 0x1E	; 30
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	8e 1b       	sub	r24, r30
    1902:	9f 0b       	sbc	r25, r31
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
    1908:	12 c0       	rjmp	.+36     	; 0x192e <__floatunsisf+0xe0>
    190a:	30 97       	sbiw	r30, 0x00	; 0
    190c:	81 f0       	breq	.+32     	; 0x192e <__floatunsisf+0xe0>
    190e:	0e 2e       	mov	r0, r30
    1910:	04 c0       	rjmp	.+8      	; 0x191a <__floatunsisf+0xcc>
    1912:	ee 0c       	add	r14, r14
    1914:	ff 1c       	adc	r15, r15
    1916:	00 1f       	adc	r16, r16
    1918:	11 1f       	adc	r17, r17
    191a:	0a 94       	dec	r0
    191c:	d2 f7       	brpl	.-12     	; 0x1912 <__floatunsisf+0xc4>
    191e:	ed 82       	std	Y+5, r14	; 0x05
    1920:	fe 82       	std	Y+6, r15	; 0x06
    1922:	0f 83       	std	Y+7, r16	; 0x07
    1924:	18 87       	std	Y+8, r17	; 0x08
    1926:	ce 1a       	sub	r12, r30
    1928:	df 0a       	sbc	r13, r31
    192a:	dc 82       	std	Y+4, r13	; 0x04
    192c:	cb 82       	std	Y+3, r12	; 0x03
    192e:	ce 01       	movw	r24, r28
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__pack_f>
    1936:	28 96       	adiw	r28, 0x08	; 8
    1938:	e8 e0       	ldi	r30, 0x08	; 8
    193a:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__epilogue_restores__+0x14>

0000193e <__clzsi2>:
    193e:	af 92       	push	r10
    1940:	bf 92       	push	r11
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	7b 01       	movw	r14, r22
    1950:	8c 01       	movw	r16, r24
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	e8 16       	cp	r14, r24
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	f8 06       	cpc	r15, r24
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	08 07       	cpc	r16, r24
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	18 07       	cpc	r17, r24
    1962:	58 f4       	brcc	.+22     	; 0x197a <__clzsi2+0x3c>
    1964:	ef ef       	ldi	r30, 0xFF	; 255
    1966:	ee 16       	cp	r14, r30
    1968:	f1 04       	cpc	r15, r1
    196a:	01 05       	cpc	r16, r1
    196c:	11 05       	cpc	r17, r1
    196e:	09 f0       	breq	.+2      	; 0x1972 <__clzsi2+0x34>
    1970:	90 f4       	brcc	.+36     	; 0x1996 <__clzsi2+0x58>
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	dc 01       	movw	r26, r24
    1978:	17 c0       	rjmp	.+46     	; 0x19a8 <__clzsi2+0x6a>
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	ef 16       	cp	r14, r31
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	ff 06       	cpc	r15, r31
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	0f 07       	cpc	r16, r31
    1986:	f1 e0       	ldi	r31, 0x01	; 1
    1988:	1f 07       	cpc	r17, r31
    198a:	50 f4       	brcc	.+20     	; 0x19a0 <__clzsi2+0x62>
    198c:	80 e1       	ldi	r24, 0x10	; 16
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a0 e0       	ldi	r26, 0x00	; 0
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	09 c0       	rjmp	.+18     	; 0x19a8 <__clzsi2+0x6a>
    1996:	88 e0       	ldi	r24, 0x08	; 8
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	a0 e0       	ldi	r26, 0x00	; 0
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	04 c0       	rjmp	.+8      	; 0x19a8 <__clzsi2+0x6a>
    19a0:	88 e1       	ldi	r24, 0x18	; 24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a0 e0       	ldi	r26, 0x00	; 0
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	20 e2       	ldi	r18, 0x20	; 32
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	28 1b       	sub	r18, r24
    19b2:	39 0b       	sbc	r19, r25
    19b4:	4a 0b       	sbc	r20, r26
    19b6:	5b 0b       	sbc	r21, r27
    19b8:	57 01       	movw	r10, r14
    19ba:	68 01       	movw	r12, r16
    19bc:	04 c0       	rjmp	.+8      	; 0x19c6 <__clzsi2+0x88>
    19be:	d6 94       	lsr	r13
    19c0:	c7 94       	ror	r12
    19c2:	b7 94       	ror	r11
    19c4:	a7 94       	ror	r10
    19c6:	8a 95       	dec	r24
    19c8:	d2 f7       	brpl	.-12     	; 0x19be <__clzsi2+0x80>
    19ca:	d6 01       	movw	r26, r12
    19cc:	c5 01       	movw	r24, r10
    19ce:	87 5f       	subi	r24, 0xF7	; 247
    19d0:	9d 4f       	sbci	r25, 0xFD	; 253
    19d2:	fc 01       	movw	r30, r24
    19d4:	80 81       	ld	r24, Z
    19d6:	28 1b       	sub	r18, r24
    19d8:	31 09       	sbc	r19, r1
    19da:	41 09       	sbc	r20, r1
    19dc:	51 09       	sbc	r21, r1
    19de:	c9 01       	movw	r24, r18
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	ff 90       	pop	r15
    19e6:	ef 90       	pop	r14
    19e8:	df 90       	pop	r13
    19ea:	cf 90       	pop	r12
    19ec:	bf 90       	pop	r11
    19ee:	af 90       	pop	r10
    19f0:	08 95       	ret

000019f2 <__pack_f>:
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	fc 01       	movw	r30, r24
    1a00:	24 81       	ldd	r18, Z+4	; 0x04
    1a02:	35 81       	ldd	r19, Z+5	; 0x05
    1a04:	46 81       	ldd	r20, Z+6	; 0x06
    1a06:	57 81       	ldd	r21, Z+7	; 0x07
    1a08:	61 81       	ldd	r22, Z+1	; 0x01
    1a0a:	80 81       	ld	r24, Z
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	20 f4       	brcc	.+8      	; 0x1a18 <__pack_f+0x26>
    1a10:	40 61       	ori	r20, 0x10	; 16
    1a12:	ef ef       	ldi	r30, 0xFF	; 255
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	a3 c0       	rjmp	.+326    	; 0x1b5e <__pack_f+0x16c>
    1a18:	84 30       	cpi	r24, 0x04	; 4
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <__pack_f+0x2c>
    1a1c:	9b c0       	rjmp	.+310    	; 0x1b54 <__pack_f+0x162>
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <__pack_f+0x32>
    1a22:	92 c0       	rjmp	.+292    	; 0x1b48 <__pack_f+0x156>
    1a24:	21 15       	cp	r18, r1
    1a26:	31 05       	cpc	r19, r1
    1a28:	41 05       	cpc	r20, r1
    1a2a:	51 05       	cpc	r21, r1
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <__pack_f+0x3e>
    1a2e:	8f c0       	rjmp	.+286    	; 0x1b4e <__pack_f+0x15c>
    1a30:	02 80       	ldd	r0, Z+2	; 0x02
    1a32:	f3 81       	ldd	r31, Z+3	; 0x03
    1a34:	e0 2d       	mov	r30, r0
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	e2 38       	cpi	r30, 0x82	; 130
    1a3a:	f8 07       	cpc	r31, r24
    1a3c:	0c f0       	brlt	.+2      	; 0x1a40 <__pack_f+0x4e>
    1a3e:	5a c0       	rjmp	.+180    	; 0x1af4 <__pack_f+0x102>
    1a40:	c2 e8       	ldi	r28, 0x82	; 130
    1a42:	df ef       	ldi	r29, 0xFF	; 255
    1a44:	ce 1b       	sub	r28, r30
    1a46:	df 0b       	sbc	r29, r31
    1a48:	ca 31       	cpi	r28, 0x1A	; 26
    1a4a:	d1 05       	cpc	r29, r1
    1a4c:	6c f5       	brge	.+90     	; 0x1aa8 <__pack_f+0xb6>
    1a4e:	79 01       	movw	r14, r18
    1a50:	8a 01       	movw	r16, r20
    1a52:	0c 2e       	mov	r0, r28
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <__pack_f+0x6c>
    1a56:	16 95       	lsr	r17
    1a58:	07 95       	ror	r16
    1a5a:	f7 94       	ror	r15
    1a5c:	e7 94       	ror	r14
    1a5e:	0a 94       	dec	r0
    1a60:	d2 f7       	brpl	.-12     	; 0x1a56 <__pack_f+0x64>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 e0       	ldi	r26, 0x00	; 0
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	0c 2e       	mov	r0, r28
    1a6c:	04 c0       	rjmp	.+8      	; 0x1a76 <__pack_f+0x84>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	aa 1f       	adc	r26, r26
    1a74:	bb 1f       	adc	r27, r27
    1a76:	0a 94       	dec	r0
    1a78:	d2 f7       	brpl	.-12     	; 0x1a6e <__pack_f+0x7c>
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	a1 09       	sbc	r26, r1
    1a7e:	b1 09       	sbc	r27, r1
    1a80:	82 23       	and	r24, r18
    1a82:	93 23       	and	r25, r19
    1a84:	a4 23       	and	r26, r20
    1a86:	b5 23       	and	r27, r21
    1a88:	21 e0       	ldi	r18, 0x01	; 1
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	a1 05       	cpc	r26, r1
    1a94:	b1 05       	cpc	r27, r1
    1a96:	19 f4       	brne	.+6      	; 0x1a9e <__pack_f+0xac>
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	a9 01       	movw	r20, r18
    1a9e:	2e 29       	or	r18, r14
    1aa0:	3f 29       	or	r19, r15
    1aa2:	40 2b       	or	r20, r16
    1aa4:	51 2b       	or	r21, r17
    1aa6:	03 c0       	rjmp	.+6      	; 0x1aae <__pack_f+0xbc>
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	a9 01       	movw	r20, r18
    1aae:	da 01       	movw	r26, r20
    1ab0:	c9 01       	movw	r24, r18
    1ab2:	8f 77       	andi	r24, 0x7F	; 127
    1ab4:	90 70       	andi	r25, 0x00	; 0
    1ab6:	a0 70       	andi	r26, 0x00	; 0
    1ab8:	b0 70       	andi	r27, 0x00	; 0
    1aba:	80 34       	cpi	r24, 0x40	; 64
    1abc:	91 05       	cpc	r25, r1
    1abe:	a1 05       	cpc	r26, r1
    1ac0:	b1 05       	cpc	r27, r1
    1ac2:	39 f4       	brne	.+14     	; 0x1ad2 <__pack_f+0xe0>
    1ac4:	27 ff       	sbrs	r18, 7
    1ac6:	09 c0       	rjmp	.+18     	; 0x1ada <__pack_f+0xe8>
    1ac8:	20 5c       	subi	r18, 0xC0	; 192
    1aca:	3f 4f       	sbci	r19, 0xFF	; 255
    1acc:	4f 4f       	sbci	r20, 0xFF	; 255
    1ace:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <__pack_f+0xe8>
    1ad2:	21 5c       	subi	r18, 0xC1	; 193
    1ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad6:	4f 4f       	sbci	r20, 0xFF	; 255
    1ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    1ada:	e1 e0       	ldi	r30, 0x01	; 1
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	20 30       	cpi	r18, 0x00	; 0
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	38 07       	cpc	r19, r24
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	48 07       	cpc	r20, r24
    1ae8:	80 e4       	ldi	r24, 0x40	; 64
    1aea:	58 07       	cpc	r21, r24
    1aec:	28 f5       	brcc	.+74     	; 0x1b38 <__pack_f+0x146>
    1aee:	e0 e0       	ldi	r30, 0x00	; 0
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	22 c0       	rjmp	.+68     	; 0x1b38 <__pack_f+0x146>
    1af4:	e0 38       	cpi	r30, 0x80	; 128
    1af6:	f1 05       	cpc	r31, r1
    1af8:	6c f5       	brge	.+90     	; 0x1b54 <__pack_f+0x162>
    1afa:	e1 58       	subi	r30, 0x81	; 129
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	da 01       	movw	r26, r20
    1b00:	c9 01       	movw	r24, r18
    1b02:	8f 77       	andi	r24, 0x7F	; 127
    1b04:	90 70       	andi	r25, 0x00	; 0
    1b06:	a0 70       	andi	r26, 0x00	; 0
    1b08:	b0 70       	andi	r27, 0x00	; 0
    1b0a:	80 34       	cpi	r24, 0x40	; 64
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	a1 05       	cpc	r26, r1
    1b10:	b1 05       	cpc	r27, r1
    1b12:	39 f4       	brne	.+14     	; 0x1b22 <__pack_f+0x130>
    1b14:	27 ff       	sbrs	r18, 7
    1b16:	09 c0       	rjmp	.+18     	; 0x1b2a <__pack_f+0x138>
    1b18:	20 5c       	subi	r18, 0xC0	; 192
    1b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b20:	04 c0       	rjmp	.+8      	; 0x1b2a <__pack_f+0x138>
    1b22:	21 5c       	subi	r18, 0xC1	; 193
    1b24:	3f 4f       	sbci	r19, 0xFF	; 255
    1b26:	4f 4f       	sbci	r20, 0xFF	; 255
    1b28:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2a:	57 ff       	sbrs	r21, 7
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <__pack_f+0x146>
    1b2e:	56 95       	lsr	r21
    1b30:	47 95       	ror	r20
    1b32:	37 95       	ror	r19
    1b34:	27 95       	ror	r18
    1b36:	31 96       	adiw	r30, 0x01	; 1
    1b38:	87 e0       	ldi	r24, 0x07	; 7
    1b3a:	56 95       	lsr	r21
    1b3c:	47 95       	ror	r20
    1b3e:	37 95       	ror	r19
    1b40:	27 95       	ror	r18
    1b42:	8a 95       	dec	r24
    1b44:	d1 f7       	brne	.-12     	; 0x1b3a <__pack_f+0x148>
    1b46:	0b c0       	rjmp	.+22     	; 0x1b5e <__pack_f+0x16c>
    1b48:	e0 e0       	ldi	r30, 0x00	; 0
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	05 c0       	rjmp	.+10     	; 0x1b58 <__pack_f+0x166>
    1b4e:	e0 e0       	ldi	r30, 0x00	; 0
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	05 c0       	rjmp	.+10     	; 0x1b5e <__pack_f+0x16c>
    1b54:	ef ef       	ldi	r30, 0xFF	; 255
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	a9 01       	movw	r20, r18
    1b5e:	8e 2f       	mov	r24, r30
    1b60:	87 95       	ror	r24
    1b62:	88 27       	eor	r24, r24
    1b64:	87 95       	ror	r24
    1b66:	94 2f       	mov	r25, r20
    1b68:	9f 77       	andi	r25, 0x7F	; 127
    1b6a:	67 95       	ror	r22
    1b6c:	66 27       	eor	r22, r22
    1b6e:	67 95       	ror	r22
    1b70:	e6 95       	lsr	r30
    1b72:	e2 2e       	mov	r14, r18
    1b74:	a9 2f       	mov	r26, r25
    1b76:	a8 2b       	or	r26, r24
    1b78:	fe 2f       	mov	r31, r30
    1b7a:	f6 2b       	or	r31, r22
    1b7c:	62 2f       	mov	r22, r18
    1b7e:	73 2f       	mov	r23, r19
    1b80:	8a 2f       	mov	r24, r26
    1b82:	9f 2f       	mov	r25, r31
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	e6 e0       	ldi	r30, 0x06	; 6
    1b8a:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__epilogue_restores__+0x18>

00001b8e <__unpack_f>:
    1b8e:	dc 01       	movw	r26, r24
    1b90:	fb 01       	movw	r30, r22
    1b92:	2c 91       	ld	r18, X
    1b94:	11 96       	adiw	r26, 0x01	; 1
    1b96:	3c 91       	ld	r19, X
    1b98:	11 97       	sbiw	r26, 0x01	; 1
    1b9a:	12 96       	adiw	r26, 0x02	; 2
    1b9c:	8c 91       	ld	r24, X
    1b9e:	12 97       	sbiw	r26, 0x02	; 2
    1ba0:	48 2f       	mov	r20, r24
    1ba2:	4f 77       	andi	r20, 0x7F	; 127
    1ba4:	50 e0       	ldi	r21, 0x00	; 0
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	99 27       	eor	r25, r25
    1bac:	99 1f       	adc	r25, r25
    1bae:	13 96       	adiw	r26, 0x03	; 3
    1bb0:	6c 91       	ld	r22, X
    1bb2:	13 97       	sbiw	r26, 0x03	; 3
    1bb4:	86 2f       	mov	r24, r22
    1bb6:	88 0f       	add	r24, r24
    1bb8:	89 2b       	or	r24, r25
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	66 1f       	adc	r22, r22
    1bbe:	66 27       	eor	r22, r22
    1bc0:	66 1f       	adc	r22, r22
    1bc2:	61 83       	std	Z+1, r22	; 0x01
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	39 f5       	brne	.+78     	; 0x1c16 <__unpack_f+0x88>
    1bc8:	21 15       	cp	r18, r1
    1bca:	31 05       	cpc	r19, r1
    1bcc:	41 05       	cpc	r20, r1
    1bce:	51 05       	cpc	r21, r1
    1bd0:	11 f4       	brne	.+4      	; 0x1bd6 <__unpack_f+0x48>
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	29 c0       	rjmp	.+82     	; 0x1c28 <__unpack_f+0x9a>
    1bd6:	82 e8       	ldi	r24, 0x82	; 130
    1bd8:	9f ef       	ldi	r25, 0xFF	; 255
    1bda:	93 83       	std	Z+3, r25	; 0x03
    1bdc:	82 83       	std	Z+2, r24	; 0x02
    1bde:	67 e0       	ldi	r22, 0x07	; 7
    1be0:	22 0f       	add	r18, r18
    1be2:	33 1f       	adc	r19, r19
    1be4:	44 1f       	adc	r20, r20
    1be6:	55 1f       	adc	r21, r21
    1be8:	6a 95       	dec	r22
    1bea:	d1 f7       	brne	.-12     	; 0x1be0 <__unpack_f+0x52>
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	80 83       	st	Z, r24
    1bf0:	09 c0       	rjmp	.+18     	; 0x1c04 <__unpack_f+0x76>
    1bf2:	22 0f       	add	r18, r18
    1bf4:	33 1f       	adc	r19, r19
    1bf6:	44 1f       	adc	r20, r20
    1bf8:	55 1f       	adc	r21, r21
    1bfa:	82 81       	ldd	r24, Z+2	; 0x02
    1bfc:	93 81       	ldd	r25, Z+3	; 0x03
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	93 83       	std	Z+3, r25	; 0x03
    1c02:	82 83       	std	Z+2, r24	; 0x02
    1c04:	20 30       	cpi	r18, 0x00	; 0
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	38 07       	cpc	r19, r24
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	48 07       	cpc	r20, r24
    1c0e:	80 e4       	ldi	r24, 0x40	; 64
    1c10:	58 07       	cpc	r21, r24
    1c12:	78 f3       	brcs	.-34     	; 0x1bf2 <__unpack_f+0x64>
    1c14:	20 c0       	rjmp	.+64     	; 0x1c56 <__unpack_f+0xc8>
    1c16:	8f 3f       	cpi	r24, 0xFF	; 255
    1c18:	91 05       	cpc	r25, r1
    1c1a:	79 f4       	brne	.+30     	; 0x1c3a <__unpack_f+0xac>
    1c1c:	21 15       	cp	r18, r1
    1c1e:	31 05       	cpc	r19, r1
    1c20:	41 05       	cpc	r20, r1
    1c22:	51 05       	cpc	r21, r1
    1c24:	19 f4       	brne	.+6      	; 0x1c2c <__unpack_f+0x9e>
    1c26:	84 e0       	ldi	r24, 0x04	; 4
    1c28:	80 83       	st	Z, r24
    1c2a:	08 95       	ret
    1c2c:	44 ff       	sbrs	r20, 4
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <__unpack_f+0xa8>
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	80 83       	st	Z, r24
    1c34:	10 c0       	rjmp	.+32     	; 0x1c56 <__unpack_f+0xc8>
    1c36:	10 82       	st	Z, r1
    1c38:	0e c0       	rjmp	.+28     	; 0x1c56 <__unpack_f+0xc8>
    1c3a:	8f 57       	subi	r24, 0x7F	; 127
    1c3c:	90 40       	sbci	r25, 0x00	; 0
    1c3e:	93 83       	std	Z+3, r25	; 0x03
    1c40:	82 83       	std	Z+2, r24	; 0x02
    1c42:	83 e0       	ldi	r24, 0x03	; 3
    1c44:	80 83       	st	Z, r24
    1c46:	87 e0       	ldi	r24, 0x07	; 7
    1c48:	22 0f       	add	r18, r18
    1c4a:	33 1f       	adc	r19, r19
    1c4c:	44 1f       	adc	r20, r20
    1c4e:	55 1f       	adc	r21, r21
    1c50:	8a 95       	dec	r24
    1c52:	d1 f7       	brne	.-12     	; 0x1c48 <__unpack_f+0xba>
    1c54:	50 64       	ori	r21, 0x40	; 64
    1c56:	24 83       	std	Z+4, r18	; 0x04
    1c58:	35 83       	std	Z+5, r19	; 0x05
    1c5a:	46 83       	std	Z+6, r20	; 0x06
    1c5c:	57 83       	std	Z+7, r21	; 0x07
    1c5e:	08 95       	ret

00001c60 <__fpcmp_parts_f>:
    1c60:	fc 01       	movw	r30, r24
    1c62:	db 01       	movw	r26, r22
    1c64:	90 81       	ld	r25, Z
    1c66:	92 30       	cpi	r25, 0x02	; 2
    1c68:	08 f4       	brcc	.+2      	; 0x1c6c <__fpcmp_parts_f+0xc>
    1c6a:	49 c0       	rjmp	.+146    	; 0x1cfe <__fpcmp_parts_f+0x9e>
    1c6c:	8c 91       	ld	r24, X
    1c6e:	82 30       	cpi	r24, 0x02	; 2
    1c70:	08 f4       	brcc	.+2      	; 0x1c74 <__fpcmp_parts_f+0x14>
    1c72:	45 c0       	rjmp	.+138    	; 0x1cfe <__fpcmp_parts_f+0x9e>
    1c74:	94 30       	cpi	r25, 0x04	; 4
    1c76:	51 f4       	brne	.+20     	; 0x1c8c <__fpcmp_parts_f+0x2c>
    1c78:	61 81       	ldd	r22, Z+1	; 0x01
    1c7a:	84 30       	cpi	r24, 0x04	; 4
    1c7c:	b1 f5       	brne	.+108    	; 0x1cea <__fpcmp_parts_f+0x8a>
    1c7e:	11 96       	adiw	r26, 0x01	; 1
    1c80:	2c 91       	ld	r18, X
    1c82:	11 97       	sbiw	r26, 0x01	; 1
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	26 1b       	sub	r18, r22
    1c88:	31 09       	sbc	r19, r1
    1c8a:	41 c0       	rjmp	.+130    	; 0x1d0e <__fpcmp_parts_f+0xae>
    1c8c:	84 30       	cpi	r24, 0x04	; 4
    1c8e:	21 f0       	breq	.+8      	; 0x1c98 <__fpcmp_parts_f+0x38>
    1c90:	92 30       	cpi	r25, 0x02	; 2
    1c92:	41 f4       	brne	.+16     	; 0x1ca4 <__fpcmp_parts_f+0x44>
    1c94:	82 30       	cpi	r24, 0x02	; 2
    1c96:	b1 f1       	breq	.+108    	; 0x1d04 <__fpcmp_parts_f+0xa4>
    1c98:	11 96       	adiw	r26, 0x01	; 1
    1c9a:	8c 91       	ld	r24, X
    1c9c:	11 97       	sbiw	r26, 0x01	; 1
    1c9e:	88 23       	and	r24, r24
    1ca0:	a1 f1       	breq	.+104    	; 0x1d0a <__fpcmp_parts_f+0xaa>
    1ca2:	2d c0       	rjmp	.+90     	; 0x1cfe <__fpcmp_parts_f+0x9e>
    1ca4:	61 81       	ldd	r22, Z+1	; 0x01
    1ca6:	82 30       	cpi	r24, 0x02	; 2
    1ca8:	01 f1       	breq	.+64     	; 0x1cea <__fpcmp_parts_f+0x8a>
    1caa:	11 96       	adiw	r26, 0x01	; 1
    1cac:	8c 91       	ld	r24, X
    1cae:	11 97       	sbiw	r26, 0x01	; 1
    1cb0:	68 17       	cp	r22, r24
    1cb2:	d9 f4       	brne	.+54     	; 0x1cea <__fpcmp_parts_f+0x8a>
    1cb4:	22 81       	ldd	r18, Z+2	; 0x02
    1cb6:	33 81       	ldd	r19, Z+3	; 0x03
    1cb8:	12 96       	adiw	r26, 0x02	; 2
    1cba:	8d 91       	ld	r24, X+
    1cbc:	9c 91       	ld	r25, X
    1cbe:	13 97       	sbiw	r26, 0x03	; 3
    1cc0:	82 17       	cp	r24, r18
    1cc2:	93 07       	cpc	r25, r19
    1cc4:	94 f0       	brlt	.+36     	; 0x1cea <__fpcmp_parts_f+0x8a>
    1cc6:	28 17       	cp	r18, r24
    1cc8:	39 07       	cpc	r19, r25
    1cca:	bc f0       	brlt	.+46     	; 0x1cfa <__fpcmp_parts_f+0x9a>
    1ccc:	24 81       	ldd	r18, Z+4	; 0x04
    1cce:	35 81       	ldd	r19, Z+5	; 0x05
    1cd0:	46 81       	ldd	r20, Z+6	; 0x06
    1cd2:	57 81       	ldd	r21, Z+7	; 0x07
    1cd4:	14 96       	adiw	r26, 0x04	; 4
    1cd6:	8d 91       	ld	r24, X+
    1cd8:	9d 91       	ld	r25, X+
    1cda:	0d 90       	ld	r0, X+
    1cdc:	bc 91       	ld	r27, X
    1cde:	a0 2d       	mov	r26, r0
    1ce0:	82 17       	cp	r24, r18
    1ce2:	93 07       	cpc	r25, r19
    1ce4:	a4 07       	cpc	r26, r20
    1ce6:	b5 07       	cpc	r27, r21
    1ce8:	18 f4       	brcc	.+6      	; 0x1cf0 <__fpcmp_parts_f+0x90>
    1cea:	66 23       	and	r22, r22
    1cec:	41 f0       	breq	.+16     	; 0x1cfe <__fpcmp_parts_f+0x9e>
    1cee:	0d c0       	rjmp	.+26     	; 0x1d0a <__fpcmp_parts_f+0xaa>
    1cf0:	28 17       	cp	r18, r24
    1cf2:	39 07       	cpc	r19, r25
    1cf4:	4a 07       	cpc	r20, r26
    1cf6:	5b 07       	cpc	r21, r27
    1cf8:	28 f4       	brcc	.+10     	; 0x1d04 <__fpcmp_parts_f+0xa4>
    1cfa:	66 23       	and	r22, r22
    1cfc:	31 f0       	breq	.+12     	; 0x1d0a <__fpcmp_parts_f+0xaa>
    1cfe:	21 e0       	ldi	r18, 0x01	; 1
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <__fpcmp_parts_f+0xae>
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <__fpcmp_parts_f+0xae>
    1d0a:	2f ef       	ldi	r18, 0xFF	; 255
    1d0c:	3f ef       	ldi	r19, 0xFF	; 255
    1d0e:	c9 01       	movw	r24, r18
    1d10:	08 95       	ret

00001d12 <__prologue_saves__>:
    1d12:	2f 92       	push	r2
    1d14:	3f 92       	push	r3
    1d16:	4f 92       	push	r4
    1d18:	5f 92       	push	r5
    1d1a:	6f 92       	push	r6
    1d1c:	7f 92       	push	r7
    1d1e:	8f 92       	push	r8
    1d20:	9f 92       	push	r9
    1d22:	af 92       	push	r10
    1d24:	bf 92       	push	r11
    1d26:	cf 92       	push	r12
    1d28:	df 92       	push	r13
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	ca 1b       	sub	r28, r26
    1d3c:	db 0b       	sbc	r29, r27
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	09 94       	ijmp

00001d4a <__epilogue_restores__>:
    1d4a:	2a 88       	ldd	r2, Y+18	; 0x12
    1d4c:	39 88       	ldd	r3, Y+17	; 0x11
    1d4e:	48 88       	ldd	r4, Y+16	; 0x10
    1d50:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d52:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d54:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d56:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d58:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d5c:	b9 84       	ldd	r11, Y+9	; 0x09
    1d5e:	c8 84       	ldd	r12, Y+8	; 0x08
    1d60:	df 80       	ldd	r13, Y+7	; 0x07
    1d62:	ee 80       	ldd	r14, Y+6	; 0x06
    1d64:	fd 80       	ldd	r15, Y+5	; 0x05
    1d66:	0c 81       	ldd	r16, Y+4	; 0x04
    1d68:	1b 81       	ldd	r17, Y+3	; 0x03
    1d6a:	aa 81       	ldd	r26, Y+2	; 0x02
    1d6c:	b9 81       	ldd	r27, Y+1	; 0x01
    1d6e:	ce 0f       	add	r28, r30
    1d70:	d1 1d       	adc	r29, r1
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	ed 01       	movw	r28, r26
    1d7e:	08 95       	ret

00001d80 <printf>:
    1d80:	a0 e0       	ldi	r26, 0x00	; 0
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e6 ec       	ldi	r30, 0xC6	; 198
    1d86:	fe e0       	ldi	r31, 0x0E	; 14
    1d88:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__prologue_saves__+0x20>
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	35 96       	adiw	r30, 0x05	; 5
    1d90:	61 91       	ld	r22, Z+
    1d92:	71 91       	ld	r23, Z+
    1d94:	80 91 18 05 	lds	r24, 0x0518
    1d98:	90 91 19 05 	lds	r25, 0x0519
    1d9c:	af 01       	movw	r20, r30
    1d9e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <vfprintf>
    1da2:	20 96       	adiw	r28, 0x00	; 0
    1da4:	e2 e0       	ldi	r30, 0x02	; 2
    1da6:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__epilogue_restores__+0x20>

00001daa <putchar>:
    1daa:	60 91 18 05 	lds	r22, 0x0518
    1dae:	70 91 19 05 	lds	r23, 0x0519
    1db2:	0e 94 0e 11 	call	0x221c	; 0x221c <fputc>
    1db6:	08 95       	ret

00001db8 <puts>:
    1db8:	ef 92       	push	r14
    1dba:	ff 92       	push	r15
    1dbc:	0f 93       	push	r16
    1dbe:	1f 93       	push	r17
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	8c 01       	movw	r16, r24
    1dc6:	e0 91 18 05 	lds	r30, 0x0518
    1dca:	f0 91 19 05 	lds	r31, 0x0519
    1dce:	83 81       	ldd	r24, Z+3	; 0x03
    1dd0:	81 ff       	sbrs	r24, 1
    1dd2:	1f c0       	rjmp	.+62     	; 0x1e12 <puts+0x5a>
    1dd4:	c0 e0       	ldi	r28, 0x00	; 0
    1dd6:	d0 e0       	ldi	r29, 0x00	; 0
    1dd8:	0a c0       	rjmp	.+20     	; 0x1dee <puts+0x36>
    1dda:	db 01       	movw	r26, r22
    1ddc:	18 96       	adiw	r26, 0x08	; 8
    1dde:	ed 91       	ld	r30, X+
    1de0:	fc 91       	ld	r31, X
    1de2:	19 97       	sbiw	r26, 0x09	; 9
    1de4:	09 95       	icall
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	11 f0       	breq	.+4      	; 0x1dee <puts+0x36>
    1dea:	cf ef       	ldi	r28, 0xFF	; 255
    1dec:	df ef       	ldi	r29, 0xFF	; 255
    1dee:	f8 01       	movw	r30, r16
    1df0:	81 91       	ld	r24, Z+
    1df2:	8f 01       	movw	r16, r30
    1df4:	60 91 18 05 	lds	r22, 0x0518
    1df8:	70 91 19 05 	lds	r23, 0x0519
    1dfc:	88 23       	and	r24, r24
    1dfe:	69 f7       	brne	.-38     	; 0x1dda <puts+0x22>
    1e00:	db 01       	movw	r26, r22
    1e02:	18 96       	adiw	r26, 0x08	; 8
    1e04:	ed 91       	ld	r30, X+
    1e06:	fc 91       	ld	r31, X
    1e08:	19 97       	sbiw	r26, 0x09	; 9
    1e0a:	8a e0       	ldi	r24, 0x0A	; 10
    1e0c:	09 95       	icall
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	11 f0       	breq	.+4      	; 0x1e16 <puts+0x5e>
    1e12:	cf ef       	ldi	r28, 0xFF	; 255
    1e14:	df ef       	ldi	r29, 0xFF	; 255
    1e16:	ce 01       	movw	r24, r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	e6 e0       	ldi	r30, 0x06	; 6
    1e1e:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__epilogue_restores__+0x18>

00001e22 <vfprintf>:
    1e22:	ac e0       	ldi	r26, 0x0C	; 12
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e7 e1       	ldi	r30, 0x17	; 23
    1e28:	ff e0       	ldi	r31, 0x0F	; 15
    1e2a:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <__prologue_saves__>
    1e2e:	6c 01       	movw	r12, r24
    1e30:	1b 01       	movw	r2, r22
    1e32:	8a 01       	movw	r16, r20
    1e34:	fc 01       	movw	r30, r24
    1e36:	17 82       	std	Z+7, r1	; 0x07
    1e38:	16 82       	std	Z+6, r1	; 0x06
    1e3a:	83 81       	ldd	r24, Z+3	; 0x03
    1e3c:	81 ff       	sbrs	r24, 1
    1e3e:	d1 c1       	rjmp	.+930    	; 0x21e2 <vfprintf+0x3c0>
    1e40:	2e 01       	movw	r4, r28
    1e42:	08 94       	sec
    1e44:	41 1c       	adc	r4, r1
    1e46:	51 1c       	adc	r5, r1
    1e48:	f6 01       	movw	r30, r12
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	f1 01       	movw	r30, r2
    1e4e:	93 fd       	sbrc	r25, 3
    1e50:	85 91       	lpm	r24, Z+
    1e52:	93 ff       	sbrs	r25, 3
    1e54:	81 91       	ld	r24, Z+
    1e56:	1f 01       	movw	r2, r30
    1e58:	88 23       	and	r24, r24
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <vfprintf+0x3c>
    1e5c:	be c1       	rjmp	.+892    	; 0x21da <vfprintf+0x3b8>
    1e5e:	85 32       	cpi	r24, 0x25	; 37
    1e60:	39 f4       	brne	.+14     	; 0x1e70 <vfprintf+0x4e>
    1e62:	93 fd       	sbrc	r25, 3
    1e64:	85 91       	lpm	r24, Z+
    1e66:	93 ff       	sbrs	r25, 3
    1e68:	81 91       	ld	r24, Z+
    1e6a:	1f 01       	movw	r2, r30
    1e6c:	85 32       	cpi	r24, 0x25	; 37
    1e6e:	29 f4       	brne	.+10     	; 0x1e7a <vfprintf+0x58>
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	b6 01       	movw	r22, r12
    1e74:	0e 94 0e 11 	call	0x221c	; 0x221c <fputc>
    1e78:	e7 cf       	rjmp	.-50     	; 0x1e48 <vfprintf+0x26>
    1e7a:	ee 24       	eor	r14, r14
    1e7c:	ff 24       	eor	r15, r15
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	20 32       	cpi	r18, 0x20	; 32
    1e82:	b0 f4       	brcc	.+44     	; 0x1eb0 <vfprintf+0x8e>
    1e84:	8b 32       	cpi	r24, 0x2B	; 43
    1e86:	69 f0       	breq	.+26     	; 0x1ea2 <vfprintf+0x80>
    1e88:	8c 32       	cpi	r24, 0x2C	; 44
    1e8a:	28 f4       	brcc	.+10     	; 0x1e96 <vfprintf+0x74>
    1e8c:	80 32       	cpi	r24, 0x20	; 32
    1e8e:	51 f0       	breq	.+20     	; 0x1ea4 <vfprintf+0x82>
    1e90:	83 32       	cpi	r24, 0x23	; 35
    1e92:	71 f4       	brne	.+28     	; 0x1eb0 <vfprintf+0x8e>
    1e94:	0b c0       	rjmp	.+22     	; 0x1eac <vfprintf+0x8a>
    1e96:	8d 32       	cpi	r24, 0x2D	; 45
    1e98:	39 f0       	breq	.+14     	; 0x1ea8 <vfprintf+0x86>
    1e9a:	80 33       	cpi	r24, 0x30	; 48
    1e9c:	49 f4       	brne	.+18     	; 0x1eb0 <vfprintf+0x8e>
    1e9e:	21 60       	ori	r18, 0x01	; 1
    1ea0:	2c c0       	rjmp	.+88     	; 0x1efa <vfprintf+0xd8>
    1ea2:	22 60       	ori	r18, 0x02	; 2
    1ea4:	24 60       	ori	r18, 0x04	; 4
    1ea6:	29 c0       	rjmp	.+82     	; 0x1efa <vfprintf+0xd8>
    1ea8:	28 60       	ori	r18, 0x08	; 8
    1eaa:	27 c0       	rjmp	.+78     	; 0x1efa <vfprintf+0xd8>
    1eac:	20 61       	ori	r18, 0x10	; 16
    1eae:	25 c0       	rjmp	.+74     	; 0x1efa <vfprintf+0xd8>
    1eb0:	27 fd       	sbrc	r18, 7
    1eb2:	2c c0       	rjmp	.+88     	; 0x1f0c <vfprintf+0xea>
    1eb4:	38 2f       	mov	r19, r24
    1eb6:	30 53       	subi	r19, 0x30	; 48
    1eb8:	3a 30       	cpi	r19, 0x0A	; 10
    1eba:	98 f4       	brcc	.+38     	; 0x1ee2 <vfprintf+0xc0>
    1ebc:	26 ff       	sbrs	r18, 6
    1ebe:	08 c0       	rjmp	.+16     	; 0x1ed0 <vfprintf+0xae>
    1ec0:	8e 2d       	mov	r24, r14
    1ec2:	88 0f       	add	r24, r24
    1ec4:	e8 2e       	mov	r14, r24
    1ec6:	ee 0c       	add	r14, r14
    1ec8:	ee 0c       	add	r14, r14
    1eca:	e8 0e       	add	r14, r24
    1ecc:	e3 0e       	add	r14, r19
    1ece:	15 c0       	rjmp	.+42     	; 0x1efa <vfprintf+0xd8>
    1ed0:	8f 2d       	mov	r24, r15
    1ed2:	88 0f       	add	r24, r24
    1ed4:	f8 2e       	mov	r15, r24
    1ed6:	ff 0c       	add	r15, r15
    1ed8:	ff 0c       	add	r15, r15
    1eda:	f8 0e       	add	r15, r24
    1edc:	f3 0e       	add	r15, r19
    1ede:	20 62       	ori	r18, 0x20	; 32
    1ee0:	0c c0       	rjmp	.+24     	; 0x1efa <vfprintf+0xd8>
    1ee2:	8e 32       	cpi	r24, 0x2E	; 46
    1ee4:	21 f4       	brne	.+8      	; 0x1eee <vfprintf+0xcc>
    1ee6:	26 fd       	sbrc	r18, 6
    1ee8:	78 c1       	rjmp	.+752    	; 0x21da <vfprintf+0x3b8>
    1eea:	20 64       	ori	r18, 0x40	; 64
    1eec:	06 c0       	rjmp	.+12     	; 0x1efa <vfprintf+0xd8>
    1eee:	8c 36       	cpi	r24, 0x6C	; 108
    1ef0:	11 f4       	brne	.+4      	; 0x1ef6 <vfprintf+0xd4>
    1ef2:	20 68       	ori	r18, 0x80	; 128
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <vfprintf+0xd8>
    1ef6:	88 36       	cpi	r24, 0x68	; 104
    1ef8:	49 f4       	brne	.+18     	; 0x1f0c <vfprintf+0xea>
    1efa:	f1 01       	movw	r30, r2
    1efc:	93 fd       	sbrc	r25, 3
    1efe:	85 91       	lpm	r24, Z+
    1f00:	93 ff       	sbrs	r25, 3
    1f02:	81 91       	ld	r24, Z+
    1f04:	1f 01       	movw	r2, r30
    1f06:	88 23       	and	r24, r24
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <vfprintf+0xea>
    1f0a:	ba cf       	rjmp	.-140    	; 0x1e80 <vfprintf+0x5e>
    1f0c:	98 2f       	mov	r25, r24
    1f0e:	95 54       	subi	r25, 0x45	; 69
    1f10:	93 30       	cpi	r25, 0x03	; 3
    1f12:	18 f0       	brcs	.+6      	; 0x1f1a <vfprintf+0xf8>
    1f14:	90 52       	subi	r25, 0x20	; 32
    1f16:	93 30       	cpi	r25, 0x03	; 3
    1f18:	28 f4       	brcc	.+10     	; 0x1f24 <vfprintf+0x102>
    1f1a:	0c 5f       	subi	r16, 0xFC	; 252
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	ff e3       	ldi	r31, 0x3F	; 63
    1f20:	f9 83       	std	Y+1, r31	; 0x01
    1f22:	0d c0       	rjmp	.+26     	; 0x1f3e <vfprintf+0x11c>
    1f24:	83 36       	cpi	r24, 0x63	; 99
    1f26:	31 f0       	breq	.+12     	; 0x1f34 <vfprintf+0x112>
    1f28:	83 37       	cpi	r24, 0x73	; 115
    1f2a:	71 f0       	breq	.+28     	; 0x1f48 <vfprintf+0x126>
    1f2c:	83 35       	cpi	r24, 0x53	; 83
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <vfprintf+0x110>
    1f30:	60 c0       	rjmp	.+192    	; 0x1ff2 <vfprintf+0x1d0>
    1f32:	22 c0       	rjmp	.+68     	; 0x1f78 <vfprintf+0x156>
    1f34:	f8 01       	movw	r30, r16
    1f36:	80 81       	ld	r24, Z
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	0e 5f       	subi	r16, 0xFE	; 254
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	42 01       	movw	r8, r4
    1f40:	71 e0       	ldi	r23, 0x01	; 1
    1f42:	a7 2e       	mov	r10, r23
    1f44:	b1 2c       	mov	r11, r1
    1f46:	16 c0       	rjmp	.+44     	; 0x1f74 <vfprintf+0x152>
    1f48:	62 e0       	ldi	r22, 0x02	; 2
    1f4a:	66 2e       	mov	r6, r22
    1f4c:	71 2c       	mov	r7, r1
    1f4e:	60 0e       	add	r6, r16
    1f50:	71 1e       	adc	r7, r17
    1f52:	f8 01       	movw	r30, r16
    1f54:	80 80       	ld	r8, Z
    1f56:	91 80       	ldd	r9, Z+1	; 0x01
    1f58:	26 ff       	sbrs	r18, 6
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <vfprintf+0x140>
    1f5c:	6e 2d       	mov	r22, r14
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <vfprintf+0x144>
    1f62:	6f ef       	ldi	r22, 0xFF	; 255
    1f64:	7f ef       	ldi	r23, 0xFF	; 255
    1f66:	c4 01       	movw	r24, r8
    1f68:	2c 87       	std	Y+12, r18	; 0x0c
    1f6a:	0e 94 03 11 	call	0x2206	; 0x2206 <strnlen>
    1f6e:	5c 01       	movw	r10, r24
    1f70:	83 01       	movw	r16, r6
    1f72:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f74:	2f 77       	andi	r18, 0x7F	; 127
    1f76:	17 c0       	rjmp	.+46     	; 0x1fa6 <vfprintf+0x184>
    1f78:	52 e0       	ldi	r21, 0x02	; 2
    1f7a:	65 2e       	mov	r6, r21
    1f7c:	71 2c       	mov	r7, r1
    1f7e:	60 0e       	add	r6, r16
    1f80:	71 1e       	adc	r7, r17
    1f82:	f8 01       	movw	r30, r16
    1f84:	80 80       	ld	r8, Z
    1f86:	91 80       	ldd	r9, Z+1	; 0x01
    1f88:	26 ff       	sbrs	r18, 6
    1f8a:	03 c0       	rjmp	.+6      	; 0x1f92 <vfprintf+0x170>
    1f8c:	6e 2d       	mov	r22, r14
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <vfprintf+0x174>
    1f92:	6f ef       	ldi	r22, 0xFF	; 255
    1f94:	7f ef       	ldi	r23, 0xFF	; 255
    1f96:	c4 01       	movw	r24, r8
    1f98:	2c 87       	std	Y+12, r18	; 0x0c
    1f9a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <strnlen_P>
    1f9e:	5c 01       	movw	r10, r24
    1fa0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fa2:	20 68       	ori	r18, 0x80	; 128
    1fa4:	83 01       	movw	r16, r6
    1fa6:	23 fd       	sbrc	r18, 3
    1fa8:	20 c0       	rjmp	.+64     	; 0x1fea <vfprintf+0x1c8>
    1faa:	08 c0       	rjmp	.+16     	; 0x1fbc <vfprintf+0x19a>
    1fac:	80 e2       	ldi	r24, 0x20	; 32
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	b6 01       	movw	r22, r12
    1fb2:	2c 87       	std	Y+12, r18	; 0x0c
    1fb4:	0e 94 0e 11 	call	0x221c	; 0x221c <fputc>
    1fb8:	fa 94       	dec	r15
    1fba:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fbc:	8f 2d       	mov	r24, r15
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	a8 16       	cp	r10, r24
    1fc2:	b9 06       	cpc	r11, r25
    1fc4:	98 f3       	brcs	.-26     	; 0x1fac <vfprintf+0x18a>
    1fc6:	11 c0       	rjmp	.+34     	; 0x1fea <vfprintf+0x1c8>
    1fc8:	f4 01       	movw	r30, r8
    1fca:	27 fd       	sbrc	r18, 7
    1fcc:	85 91       	lpm	r24, Z+
    1fce:	27 ff       	sbrs	r18, 7
    1fd0:	81 91       	ld	r24, Z+
    1fd2:	4f 01       	movw	r8, r30
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	b6 01       	movw	r22, r12
    1fd8:	2c 87       	std	Y+12, r18	; 0x0c
    1fda:	0e 94 0e 11 	call	0x221c	; 0x221c <fputc>
    1fde:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fe0:	f1 10       	cpse	r15, r1
    1fe2:	fa 94       	dec	r15
    1fe4:	08 94       	sec
    1fe6:	a1 08       	sbc	r10, r1
    1fe8:	b1 08       	sbc	r11, r1
    1fea:	a1 14       	cp	r10, r1
    1fec:	b1 04       	cpc	r11, r1
    1fee:	61 f7       	brne	.-40     	; 0x1fc8 <vfprintf+0x1a6>
    1ff0:	f1 c0       	rjmp	.+482    	; 0x21d4 <vfprintf+0x3b2>
    1ff2:	84 36       	cpi	r24, 0x64	; 100
    1ff4:	11 f0       	breq	.+4      	; 0x1ffa <vfprintf+0x1d8>
    1ff6:	89 36       	cpi	r24, 0x69	; 105
    1ff8:	49 f5       	brne	.+82     	; 0x204c <vfprintf+0x22a>
    1ffa:	27 ff       	sbrs	r18, 7
    1ffc:	08 c0       	rjmp	.+16     	; 0x200e <vfprintf+0x1ec>
    1ffe:	f8 01       	movw	r30, r16
    2000:	60 81       	ld	r22, Z
    2002:	71 81       	ldd	r23, Z+1	; 0x01
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	93 81       	ldd	r25, Z+3	; 0x03
    2008:	0c 5f       	subi	r16, 0xFC	; 252
    200a:	1f 4f       	sbci	r17, 0xFF	; 255
    200c:	09 c0       	rjmp	.+18     	; 0x2020 <vfprintf+0x1fe>
    200e:	f8 01       	movw	r30, r16
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	88 27       	eor	r24, r24
    2016:	77 fd       	sbrc	r23, 7
    2018:	80 95       	com	r24
    201a:	98 2f       	mov	r25, r24
    201c:	0e 5f       	subi	r16, 0xFE	; 254
    201e:	1f 4f       	sbci	r17, 0xFF	; 255
    2020:	4f e6       	ldi	r20, 0x6F	; 111
    2022:	b4 2e       	mov	r11, r20
    2024:	b2 22       	and	r11, r18
    2026:	97 ff       	sbrs	r25, 7
    2028:	09 c0       	rjmp	.+18     	; 0x203c <vfprintf+0x21a>
    202a:	90 95       	com	r25
    202c:	80 95       	com	r24
    202e:	70 95       	com	r23
    2030:	61 95       	neg	r22
    2032:	7f 4f       	sbci	r23, 0xFF	; 255
    2034:	8f 4f       	sbci	r24, 0xFF	; 255
    2036:	9f 4f       	sbci	r25, 0xFF	; 255
    2038:	f0 e8       	ldi	r31, 0x80	; 128
    203a:	bf 2a       	or	r11, r31
    203c:	a2 01       	movw	r20, r4
    203e:	2a e0       	ldi	r18, 0x0A	; 10
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	0e 94 3a 11 	call	0x2274	; 0x2274 <__ultoa_invert>
    2046:	78 2e       	mov	r7, r24
    2048:	74 18       	sub	r7, r4
    204a:	45 c0       	rjmp	.+138    	; 0x20d6 <vfprintf+0x2b4>
    204c:	85 37       	cpi	r24, 0x75	; 117
    204e:	31 f4       	brne	.+12     	; 0x205c <vfprintf+0x23a>
    2050:	3f ee       	ldi	r19, 0xEF	; 239
    2052:	b3 2e       	mov	r11, r19
    2054:	b2 22       	and	r11, r18
    2056:	2a e0       	ldi	r18, 0x0A	; 10
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	25 c0       	rjmp	.+74     	; 0x20a6 <vfprintf+0x284>
    205c:	99 ef       	ldi	r25, 0xF9	; 249
    205e:	b9 2e       	mov	r11, r25
    2060:	b2 22       	and	r11, r18
    2062:	8f 36       	cpi	r24, 0x6F	; 111
    2064:	c1 f0       	breq	.+48     	; 0x2096 <vfprintf+0x274>
    2066:	80 37       	cpi	r24, 0x70	; 112
    2068:	20 f4       	brcc	.+8      	; 0x2072 <vfprintf+0x250>
    206a:	88 35       	cpi	r24, 0x58	; 88
    206c:	09 f0       	breq	.+2      	; 0x2070 <vfprintf+0x24e>
    206e:	b5 c0       	rjmp	.+362    	; 0x21da <vfprintf+0x3b8>
    2070:	0d c0       	rjmp	.+26     	; 0x208c <vfprintf+0x26a>
    2072:	80 37       	cpi	r24, 0x70	; 112
    2074:	21 f0       	breq	.+8      	; 0x207e <vfprintf+0x25c>
    2076:	88 37       	cpi	r24, 0x78	; 120
    2078:	09 f0       	breq	.+2      	; 0x207c <vfprintf+0x25a>
    207a:	af c0       	rjmp	.+350    	; 0x21da <vfprintf+0x3b8>
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <vfprintf+0x260>
    207e:	20 e1       	ldi	r18, 0x10	; 16
    2080:	b2 2a       	or	r11, r18
    2082:	b4 fe       	sbrs	r11, 4
    2084:	0b c0       	rjmp	.+22     	; 0x209c <vfprintf+0x27a>
    2086:	84 e0       	ldi	r24, 0x04	; 4
    2088:	b8 2a       	or	r11, r24
    208a:	08 c0       	rjmp	.+16     	; 0x209c <vfprintf+0x27a>
    208c:	b4 fe       	sbrs	r11, 4
    208e:	09 c0       	rjmp	.+18     	; 0x20a2 <vfprintf+0x280>
    2090:	e6 e0       	ldi	r30, 0x06	; 6
    2092:	be 2a       	or	r11, r30
    2094:	06 c0       	rjmp	.+12     	; 0x20a2 <vfprintf+0x280>
    2096:	28 e0       	ldi	r18, 0x08	; 8
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	05 c0       	rjmp	.+10     	; 0x20a6 <vfprintf+0x284>
    209c:	20 e1       	ldi	r18, 0x10	; 16
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <vfprintf+0x284>
    20a2:	20 e1       	ldi	r18, 0x10	; 16
    20a4:	32 e0       	ldi	r19, 0x02	; 2
    20a6:	b7 fe       	sbrs	r11, 7
    20a8:	08 c0       	rjmp	.+16     	; 0x20ba <vfprintf+0x298>
    20aa:	f8 01       	movw	r30, r16
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	0c 5f       	subi	r16, 0xFC	; 252
    20b6:	1f 4f       	sbci	r17, 0xFF	; 255
    20b8:	07 c0       	rjmp	.+14     	; 0x20c8 <vfprintf+0x2a6>
    20ba:	f8 01       	movw	r30, r16
    20bc:	60 81       	ld	r22, Z
    20be:	71 81       	ldd	r23, Z+1	; 0x01
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	0e 5f       	subi	r16, 0xFE	; 254
    20c6:	1f 4f       	sbci	r17, 0xFF	; 255
    20c8:	a2 01       	movw	r20, r4
    20ca:	0e 94 3a 11 	call	0x2274	; 0x2274 <__ultoa_invert>
    20ce:	78 2e       	mov	r7, r24
    20d0:	74 18       	sub	r7, r4
    20d2:	ff e7       	ldi	r31, 0x7F	; 127
    20d4:	bf 22       	and	r11, r31
    20d6:	b6 fe       	sbrs	r11, 6
    20d8:	0b c0       	rjmp	.+22     	; 0x20f0 <vfprintf+0x2ce>
    20da:	2e ef       	ldi	r18, 0xFE	; 254
    20dc:	b2 22       	and	r11, r18
    20de:	7e 14       	cp	r7, r14
    20e0:	38 f4       	brcc	.+14     	; 0x20f0 <vfprintf+0x2ce>
    20e2:	b4 fe       	sbrs	r11, 4
    20e4:	07 c0       	rjmp	.+14     	; 0x20f4 <vfprintf+0x2d2>
    20e6:	b2 fc       	sbrc	r11, 2
    20e8:	05 c0       	rjmp	.+10     	; 0x20f4 <vfprintf+0x2d2>
    20ea:	8f ee       	ldi	r24, 0xEF	; 239
    20ec:	b8 22       	and	r11, r24
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <vfprintf+0x2d2>
    20f0:	a7 2c       	mov	r10, r7
    20f2:	01 c0       	rjmp	.+2      	; 0x20f6 <vfprintf+0x2d4>
    20f4:	ae 2c       	mov	r10, r14
    20f6:	8b 2d       	mov	r24, r11
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	b4 fe       	sbrs	r11, 4
    20fc:	0d c0       	rjmp	.+26     	; 0x2118 <vfprintf+0x2f6>
    20fe:	fe 01       	movw	r30, r28
    2100:	e7 0d       	add	r30, r7
    2102:	f1 1d       	adc	r31, r1
    2104:	20 81       	ld	r18, Z
    2106:	20 33       	cpi	r18, 0x30	; 48
    2108:	19 f4       	brne	.+6      	; 0x2110 <vfprintf+0x2ee>
    210a:	e9 ee       	ldi	r30, 0xE9	; 233
    210c:	be 22       	and	r11, r30
    210e:	09 c0       	rjmp	.+18     	; 0x2122 <vfprintf+0x300>
    2110:	a3 94       	inc	r10
    2112:	b2 fe       	sbrs	r11, 2
    2114:	06 c0       	rjmp	.+12     	; 0x2122 <vfprintf+0x300>
    2116:	04 c0       	rjmp	.+8      	; 0x2120 <vfprintf+0x2fe>
    2118:	86 78       	andi	r24, 0x86	; 134
    211a:	90 70       	andi	r25, 0x00	; 0
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	09 f0       	breq	.+2      	; 0x2122 <vfprintf+0x300>
    2120:	a3 94       	inc	r10
    2122:	8b 2c       	mov	r8, r11
    2124:	99 24       	eor	r9, r9
    2126:	b3 fc       	sbrc	r11, 3
    2128:	14 c0       	rjmp	.+40     	; 0x2152 <vfprintf+0x330>
    212a:	b0 fe       	sbrs	r11, 0
    212c:	0f c0       	rjmp	.+30     	; 0x214c <vfprintf+0x32a>
    212e:	af 14       	cp	r10, r15
    2130:	28 f4       	brcc	.+10     	; 0x213c <vfprintf+0x31a>
    2132:	e7 2c       	mov	r14, r7
    2134:	ef 0c       	add	r14, r15
    2136:	ea 18       	sub	r14, r10
    2138:	af 2c       	mov	r10, r15
    213a:	08 c0       	rjmp	.+16     	; 0x214c <vfprintf+0x32a>
    213c:	e7 2c       	mov	r14, r7
    213e:	06 c0       	rjmp	.+12     	; 0x214c <vfprintf+0x32a>
    2140:	80 e2       	ldi	r24, 0x20	; 32
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	b6 01       	movw	r22, r12
    2146:	0e 94 0e 11 	call	0x221c	; 0x221c <fputc>
    214a:	a3 94       	inc	r10
    214c:	af 14       	cp	r10, r15
    214e:	c0 f3       	brcs	.-16     	; 0x2140 <vfprintf+0x31e>
    2150:	04 c0       	rjmp	.+8      	; 0x215a <vfprintf+0x338>
    2152:	af 14       	cp	r10, r15
    2154:	10 f4       	brcc	.+4      	; 0x215a <vfprintf+0x338>
    2156:	fa 18       	sub	r15, r10
    2158:	01 c0       	rjmp	.+2      	; 0x215c <vfprintf+0x33a>
    215a:	ff 24       	eor	r15, r15
    215c:	84 fe       	sbrs	r8, 4
    215e:	0f c0       	rjmp	.+30     	; 0x217e <vfprintf+0x35c>
    2160:	80 e3       	ldi	r24, 0x30	; 48
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	b6 01       	movw	r22, r12
    2166:	0e 94 0e 11 	call	0x221c	; 0x221c <fputc>
    216a:	82 fe       	sbrs	r8, 2
    216c:	1f c0       	rjmp	.+62     	; 0x21ac <vfprintf+0x38a>
    216e:	81 fe       	sbrs	r8, 1
    2170:	03 c0       	rjmp	.+6      	; 0x2178 <vfprintf+0x356>
    2172:	88 e5       	ldi	r24, 0x58	; 88
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	10 c0       	rjmp	.+32     	; 0x2198 <vfprintf+0x376>
    2178:	88 e7       	ldi	r24, 0x78	; 120
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	0d c0       	rjmp	.+26     	; 0x2198 <vfprintf+0x376>
    217e:	c4 01       	movw	r24, r8
    2180:	86 78       	andi	r24, 0x86	; 134
    2182:	90 70       	andi	r25, 0x00	; 0
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	91 f0       	breq	.+36     	; 0x21ac <vfprintf+0x38a>
    2188:	81 fc       	sbrc	r8, 1
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <vfprintf+0x36e>
    218c:	80 e2       	ldi	r24, 0x20	; 32
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <vfprintf+0x370>
    2190:	8b e2       	ldi	r24, 0x2B	; 43
    2192:	b7 fc       	sbrc	r11, 7
    2194:	8d e2       	ldi	r24, 0x2D	; 45
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	b6 01       	movw	r22, r12
    219a:	0e 94 0e 11 	call	0x221c	; 0x221c <fputc>
    219e:	06 c0       	rjmp	.+12     	; 0x21ac <vfprintf+0x38a>
    21a0:	80 e3       	ldi	r24, 0x30	; 48
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	b6 01       	movw	r22, r12
    21a6:	0e 94 0e 11 	call	0x221c	; 0x221c <fputc>
    21aa:	ea 94       	dec	r14
    21ac:	7e 14       	cp	r7, r14
    21ae:	c0 f3       	brcs	.-16     	; 0x21a0 <vfprintf+0x37e>
    21b0:	7a 94       	dec	r7
    21b2:	f2 01       	movw	r30, r4
    21b4:	e7 0d       	add	r30, r7
    21b6:	f1 1d       	adc	r31, r1
    21b8:	80 81       	ld	r24, Z
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	b6 01       	movw	r22, r12
    21be:	0e 94 0e 11 	call	0x221c	; 0x221c <fputc>
    21c2:	77 20       	and	r7, r7
    21c4:	a9 f7       	brne	.-22     	; 0x21b0 <vfprintf+0x38e>
    21c6:	06 c0       	rjmp	.+12     	; 0x21d4 <vfprintf+0x3b2>
    21c8:	80 e2       	ldi	r24, 0x20	; 32
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	b6 01       	movw	r22, r12
    21ce:	0e 94 0e 11 	call	0x221c	; 0x221c <fputc>
    21d2:	fa 94       	dec	r15
    21d4:	ff 20       	and	r15, r15
    21d6:	c1 f7       	brne	.-16     	; 0x21c8 <vfprintf+0x3a6>
    21d8:	37 ce       	rjmp	.-914    	; 0x1e48 <vfprintf+0x26>
    21da:	f6 01       	movw	r30, r12
    21dc:	26 81       	ldd	r18, Z+6	; 0x06
    21de:	37 81       	ldd	r19, Z+7	; 0x07
    21e0:	02 c0       	rjmp	.+4      	; 0x21e6 <vfprintf+0x3c4>
    21e2:	2f ef       	ldi	r18, 0xFF	; 255
    21e4:	3f ef       	ldi	r19, 0xFF	; 255
    21e6:	c9 01       	movw	r24, r18
    21e8:	2c 96       	adiw	r28, 0x0c	; 12
    21ea:	e2 e1       	ldi	r30, 0x12	; 18
    21ec:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__epilogue_restores__>

000021f0 <strnlen_P>:
    21f0:	fc 01       	movw	r30, r24
    21f2:	05 90       	lpm	r0, Z+
    21f4:	61 50       	subi	r22, 0x01	; 1
    21f6:	70 40       	sbci	r23, 0x00	; 0
    21f8:	01 10       	cpse	r0, r1
    21fa:	d8 f7       	brcc	.-10     	; 0x21f2 <strnlen_P+0x2>
    21fc:	80 95       	com	r24
    21fe:	90 95       	com	r25
    2200:	8e 0f       	add	r24, r30
    2202:	9f 1f       	adc	r25, r31
    2204:	08 95       	ret

00002206 <strnlen>:
    2206:	fc 01       	movw	r30, r24
    2208:	61 50       	subi	r22, 0x01	; 1
    220a:	70 40       	sbci	r23, 0x00	; 0
    220c:	01 90       	ld	r0, Z+
    220e:	01 10       	cpse	r0, r1
    2210:	d8 f7       	brcc	.-10     	; 0x2208 <strnlen+0x2>
    2212:	80 95       	com	r24
    2214:	90 95       	com	r25
    2216:	8e 0f       	add	r24, r30
    2218:	9f 1f       	adc	r25, r31
    221a:	08 95       	ret

0000221c <fputc>:
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	8c 01       	movw	r16, r24
    2226:	eb 01       	movw	r28, r22
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	81 ff       	sbrs	r24, 1
    222c:	1b c0       	rjmp	.+54     	; 0x2264 <fputc+0x48>
    222e:	82 ff       	sbrs	r24, 2
    2230:	0d c0       	rjmp	.+26     	; 0x224c <fputc+0x30>
    2232:	2e 81       	ldd	r18, Y+6	; 0x06
    2234:	3f 81       	ldd	r19, Y+7	; 0x07
    2236:	8c 81       	ldd	r24, Y+4	; 0x04
    2238:	9d 81       	ldd	r25, Y+5	; 0x05
    223a:	28 17       	cp	r18, r24
    223c:	39 07       	cpc	r19, r25
    223e:	64 f4       	brge	.+24     	; 0x2258 <fputc+0x3c>
    2240:	e8 81       	ld	r30, Y
    2242:	f9 81       	ldd	r31, Y+1	; 0x01
    2244:	01 93       	st	Z+, r16
    2246:	f9 83       	std	Y+1, r31	; 0x01
    2248:	e8 83       	st	Y, r30
    224a:	06 c0       	rjmp	.+12     	; 0x2258 <fputc+0x3c>
    224c:	e8 85       	ldd	r30, Y+8	; 0x08
    224e:	f9 85       	ldd	r31, Y+9	; 0x09
    2250:	80 2f       	mov	r24, r16
    2252:	09 95       	icall
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	31 f4       	brne	.+12     	; 0x2264 <fputc+0x48>
    2258:	8e 81       	ldd	r24, Y+6	; 0x06
    225a:	9f 81       	ldd	r25, Y+7	; 0x07
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	9f 83       	std	Y+7, r25	; 0x07
    2260:	8e 83       	std	Y+6, r24	; 0x06
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <fputc+0x4c>
    2264:	0f ef       	ldi	r16, 0xFF	; 255
    2266:	1f ef       	ldi	r17, 0xFF	; 255
    2268:	c8 01       	movw	r24, r16
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	08 95       	ret

00002274 <__ultoa_invert>:
    2274:	fa 01       	movw	r30, r20
    2276:	aa 27       	eor	r26, r26
    2278:	28 30       	cpi	r18, 0x08	; 8
    227a:	51 f1       	breq	.+84     	; 0x22d0 <__ultoa_invert+0x5c>
    227c:	20 31       	cpi	r18, 0x10	; 16
    227e:	81 f1       	breq	.+96     	; 0x22e0 <__ultoa_invert+0x6c>
    2280:	e8 94       	clt
    2282:	6f 93       	push	r22
    2284:	6e 7f       	andi	r22, 0xFE	; 254
    2286:	6e 5f       	subi	r22, 0xFE	; 254
    2288:	7f 4f       	sbci	r23, 0xFF	; 255
    228a:	8f 4f       	sbci	r24, 0xFF	; 255
    228c:	9f 4f       	sbci	r25, 0xFF	; 255
    228e:	af 4f       	sbci	r26, 0xFF	; 255
    2290:	b1 e0       	ldi	r27, 0x01	; 1
    2292:	3e d0       	rcall	.+124    	; 0x2310 <__ultoa_invert+0x9c>
    2294:	b4 e0       	ldi	r27, 0x04	; 4
    2296:	3c d0       	rcall	.+120    	; 0x2310 <__ultoa_invert+0x9c>
    2298:	67 0f       	add	r22, r23
    229a:	78 1f       	adc	r23, r24
    229c:	89 1f       	adc	r24, r25
    229e:	9a 1f       	adc	r25, r26
    22a0:	a1 1d       	adc	r26, r1
    22a2:	68 0f       	add	r22, r24
    22a4:	79 1f       	adc	r23, r25
    22a6:	8a 1f       	adc	r24, r26
    22a8:	91 1d       	adc	r25, r1
    22aa:	a1 1d       	adc	r26, r1
    22ac:	6a 0f       	add	r22, r26
    22ae:	71 1d       	adc	r23, r1
    22b0:	81 1d       	adc	r24, r1
    22b2:	91 1d       	adc	r25, r1
    22b4:	a1 1d       	adc	r26, r1
    22b6:	20 d0       	rcall	.+64     	; 0x22f8 <__ultoa_invert+0x84>
    22b8:	09 f4       	brne	.+2      	; 0x22bc <__ultoa_invert+0x48>
    22ba:	68 94       	set
    22bc:	3f 91       	pop	r19
    22be:	2a e0       	ldi	r18, 0x0A	; 10
    22c0:	26 9f       	mul	r18, r22
    22c2:	11 24       	eor	r1, r1
    22c4:	30 19       	sub	r19, r0
    22c6:	30 5d       	subi	r19, 0xD0	; 208
    22c8:	31 93       	st	Z+, r19
    22ca:	de f6       	brtc	.-74     	; 0x2282 <__ultoa_invert+0xe>
    22cc:	cf 01       	movw	r24, r30
    22ce:	08 95       	ret
    22d0:	46 2f       	mov	r20, r22
    22d2:	47 70       	andi	r20, 0x07	; 7
    22d4:	40 5d       	subi	r20, 0xD0	; 208
    22d6:	41 93       	st	Z+, r20
    22d8:	b3 e0       	ldi	r27, 0x03	; 3
    22da:	0f d0       	rcall	.+30     	; 0x22fa <__ultoa_invert+0x86>
    22dc:	c9 f7       	brne	.-14     	; 0x22d0 <__ultoa_invert+0x5c>
    22de:	f6 cf       	rjmp	.-20     	; 0x22cc <__ultoa_invert+0x58>
    22e0:	46 2f       	mov	r20, r22
    22e2:	4f 70       	andi	r20, 0x0F	; 15
    22e4:	40 5d       	subi	r20, 0xD0	; 208
    22e6:	4a 33       	cpi	r20, 0x3A	; 58
    22e8:	18 f0       	brcs	.+6      	; 0x22f0 <__ultoa_invert+0x7c>
    22ea:	49 5d       	subi	r20, 0xD9	; 217
    22ec:	31 fd       	sbrc	r19, 1
    22ee:	40 52       	subi	r20, 0x20	; 32
    22f0:	41 93       	st	Z+, r20
    22f2:	02 d0       	rcall	.+4      	; 0x22f8 <__ultoa_invert+0x84>
    22f4:	a9 f7       	brne	.-22     	; 0x22e0 <__ultoa_invert+0x6c>
    22f6:	ea cf       	rjmp	.-44     	; 0x22cc <__ultoa_invert+0x58>
    22f8:	b4 e0       	ldi	r27, 0x04	; 4
    22fa:	a6 95       	lsr	r26
    22fc:	97 95       	ror	r25
    22fe:	87 95       	ror	r24
    2300:	77 95       	ror	r23
    2302:	67 95       	ror	r22
    2304:	ba 95       	dec	r27
    2306:	c9 f7       	brne	.-14     	; 0x22fa <__ultoa_invert+0x86>
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	61 05       	cpc	r22, r1
    230c:	71 05       	cpc	r23, r1
    230e:	08 95       	ret
    2310:	9b 01       	movw	r18, r22
    2312:	ac 01       	movw	r20, r24
    2314:	0a 2e       	mov	r0, r26
    2316:	06 94       	lsr	r0
    2318:	57 95       	ror	r21
    231a:	47 95       	ror	r20
    231c:	37 95       	ror	r19
    231e:	27 95       	ror	r18
    2320:	ba 95       	dec	r27
    2322:	c9 f7       	brne	.-14     	; 0x2316 <__ultoa_invert+0xa2>
    2324:	62 0f       	add	r22, r18
    2326:	73 1f       	adc	r23, r19
    2328:	84 1f       	adc	r24, r20
    232a:	95 1f       	adc	r25, r21
    232c:	a0 1d       	adc	r26, r0
    232e:	08 95       	ret

00002330 <_exit>:
    2330:	f8 94       	cli

00002332 <__stop_program>:
    2332:	ff cf       	rjmp	.-2      	; 0x2332 <__stop_program>
